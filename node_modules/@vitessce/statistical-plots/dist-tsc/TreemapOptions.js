import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { useId } from 'react-aria';
import { isEqual } from 'lodash-es';
import { TableCell, TableRow } from '@vitessce/styles';
import { capitalize } from '@vitessce/utils';
import { usePlotOptionsStyles, OptionSelect, OptionsContainer, } from '@vitessce/vit-s';
export default function TreemapOptions(props) {
    const { children, obsType, sampleType, hierarchyLevels, setHierarchyLevels, obsColorEncoding, setObsColorEncoding, } = props;
    const treemapOptionsId = useId();
    const { classes } = usePlotOptionsStyles();
    function handleColorEncodingChange(event) {
        setObsColorEncoding(event.target.value);
    }
    function handleHierarchyLevelsOrderingChange(event) {
        if (event.target.value === 'sampleSet') {
            setHierarchyLevels(['sampleSet', 'obsSet']);
        }
        else {
            setHierarchyLevels(['obsSet', 'sampleSet']);
        }
    }
    const primaryHierarchyLevel = isEqual(hierarchyLevels, ['sampleSet', 'obsSet']) ? 'sampleSet' : 'obsSet';
    return (_jsxs(OptionsContainer, { children: [children, _jsxs(TableRow, { children: [_jsx(TableCell, { className: classes.labelCell, variant: "head", scope: "row", children: _jsx("label", { htmlFor: `cell-color-encoding-select-${treemapOptionsId}`, children: "Color Encoding" }) }), _jsx(TableCell, { className: classes.inputCell, variant: "body", children: _jsxs(OptionSelect, { className: classes.select, value: obsColorEncoding, onChange: handleColorEncodingChange, inputProps: {
                                id: `cell-color-encoding-select-${treemapOptionsId}`,
                            }, children: [_jsxs("option", { value: "cellSetSelection", children: [capitalize(obsType), " Sets"] }), _jsxs("option", { value: "sampleSetSelection", children: [capitalize(sampleType), " Sets"] })] }) })] }), _jsxs(TableRow, { children: [_jsx(TableCell, { className: classes.labelCell, variant: "head", scope: "row", children: _jsx("label", { htmlFor: `treemap-set-hierarchy-levels-${treemapOptionsId}`, children: "Primary Hierarchy Level" }) }), _jsx(TableCell, { className: classes.inputCell, variant: "body", children: _jsxs(OptionSelect, { className: classes.select, value: primaryHierarchyLevel, onChange: handleHierarchyLevelsOrderingChange, inputProps: {
                                id: `hierarchy-level-select-${treemapOptionsId}`,
                            }, children: [_jsxs("option", { value: "obsSet", children: [capitalize(obsType), " Sets"] }), _jsxs("option", { value: "sampleSet", children: [capitalize(sampleType), " Sets"] })] }) })] })] }));
}
