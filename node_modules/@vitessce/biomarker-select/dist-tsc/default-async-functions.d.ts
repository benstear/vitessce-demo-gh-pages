/**
 * @satisfies {AutocompleteFeatureFunc}
 * @param {object} ctx
 * @param {QueryClient} ctx.queryClient
 * @param {string} partial
 * @param {null | TargetModalityType} targetModality
 * @returns {Promise<KgNode[]>}
 */
export function autocompleteFeature({ queryClient }: {
    queryClient: QueryClient;
}, partial: string, targetModality: null | TargetModalityType): Promise<KgNode[]>;
/**
 * @satisfies {TransformFeatureFunc}
 * @param {object} ctx
 * @param {QueryClient} ctx.queryClient
 * @param {KgNode} nodeOrig
 * @param {TargetModalityType} targetModality
 * @returns {Promise<KgNode[]>}
 */
export function transformFeature({ queryClient }: {
    queryClient: QueryClient;
}, nodeOrig: KgNode, targetModality: TargetModalityType): Promise<KgNode[]>;
/**
 * @satisfies {GetAlternativeTermsFunc}
 * @param {object} ctx
 * @param {QueryClient} ctx.queryClient
 * @param {string} curie
 * @returns {Promise<string[]>} A list of curie strings.
 */
export function getAlternativeTerms({ queryClient }: {
    queryClient: QueryClient;
}, curie: string): Promise<string[]>;
/**
 * @satisfies {GetTermMappingFunc}
 * @param {object} ctx
 * @param {QueryClient} ctx.queryClient
 * @param {string} keyCuriePrefix
 * @param {string} valCuriePrefix
 * @returns {Promise<Map<string, string>>} A mapping between curie strings.
 */
export function getTermMapping({ queryClient }: {
    queryClient: QueryClient;
}, keyCuriePrefix: string, valCuriePrefix: string): Promise<Map<string, string>>;
import type { QueryClient } from '@tanstack/react-query';
import type { TargetModalityType } from '@vitessce/types';
import type { KgNode } from '@vitessce/types';
//# sourceMappingURL=default-async-functions.d.ts.map