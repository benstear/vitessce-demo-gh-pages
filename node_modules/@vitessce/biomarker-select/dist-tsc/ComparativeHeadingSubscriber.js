import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useCallback } from 'react';
import { useCoordination, } from '@vitessce/vit-s';
import { ViewType, COMPONENT_COORDINATION_TYPES } from '@vitessce/constants-internal';
import { makeStyles } from '@vitessce/styles';
const useStyles = makeStyles()(theme => ({
    buttonContainer: {
        position: 'absolute',
        right: 0,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        height: '100%',
        '& div': {
            display: 'flex',
            flexDirection: 'row',
        },
        '& div > button': {
            height: 'auto',
        },
    },
    headingContainer: {
        backgroundColor: 'transparent',
    },
    headingSectionContainer: {
        width: '100%',
        display: 'flex',
        flexDirection: 'row',
        position: 'relative',
    },
    headingText: {
        margin: 0,
        color: theme.palette.primaryForeground,
    },
}));
export function ComparativeHeadingSubscriber(props) {
    const { coordinationScopes, } = props;
    const [{ sampleSetSelection, featureSelection, }, { setSampleSetSelection, setFeatureSelection, }] = useCoordination(COMPONENT_COORDINATION_TYPES[ViewType.COMPARATIVE_HEADING], coordinationScopes);
    const { classes } = useStyles();
    const swapSampleSets = useCallback(() => {
        if (sampleSetSelection?.length === 2) {
            setSampleSetSelection([
                sampleSetSelection[1],
                sampleSetSelection[0],
            ]);
        }
    }, [sampleSetSelection, setSampleSetSelection]);
    const clearSampleSetSelection = useCallback(() => {
        if (sampleSetSelection?.length === 2) {
            setSampleSetSelection(null);
        }
    }, [sampleSetSelection, setSampleSetSelection]);
    const clearFeatureSelection = useCallback(() => {
        if (Array.isArray(featureSelection) && featureSelection.length > 0) {
            setFeatureSelection(null);
        }
    }, [featureSelection, setFeatureSelection]);
    return (_jsxs("div", { className: classes.headingContainer, children: [sampleSetSelection && sampleSetSelection.length === 2 ? (_jsxs("div", { className: classes.headingSectionContainer, children: [_jsx("div", { style: { width: '45%' }, children: _jsx("h2", { className: classes.headingText, children: sampleSetSelection?.[0]?.at(-1) }) }), _jsx("div", { style: { width: '5%' }, children: _jsx("h2", { className: classes.headingText, style: { textAlign: 'right' }, children: "vs.\u00A0" }) }), _jsx("div", { style: { width: '50%' }, children: _jsx("h2", { className: classes.headingText, children: sampleSetSelection?.[1]?.at(-1) }) }), _jsx("div", { className: classes.buttonContainer, children: _jsxs("div", { children: [_jsx("button", { onClick: swapSampleSets, type: "button", children: "Swap" }), _jsx("button", { onClick: clearSampleSetSelection, type: "button", children: "Clear" })] }) })] })) : (_jsx("div", { className: classes.headingSectionContainer, children: _jsx("div", { children: _jsx("h2", { className: classes.headingText, children: "All samples" }) }) })), featureSelection && featureSelection.length > 0 ? (_jsxs("div", { className: classes.headingSectionContainer, children: [_jsx("div", { children: _jsx("h3", { className: classes.headingText, children: "Selected Biomarkers:\u00A0" }) }), featureSelection?.map((featureName, i) => (_jsx("div", { children: _jsxs("h3", { className: classes.headingText, children: [featureName, i < featureSelection.length - 1 ? (_jsx("span", { children: ",\u00A0" })) : null] }) }, featureName))), _jsx("div", { className: classes.buttonContainer, children: _jsx("div", { children: _jsx("button", { onClick: clearFeatureSelection, type: "button", children: "Clear" }) }) })] })) : null] }));
}
