function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import Trigger from '@rc-component/trigger';
import useId from "@rc-component/util/es/hooks/useId";
import classNames from 'classnames';
import * as React from 'react';
import { useImperativeHandle, useRef } from 'react';
import { placements } from "./placements";
import Popup from "./Popup";
const Tooltip = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    overlayClassName,
    trigger = ['hover'],
    mouseEnterDelay = 0,
    mouseLeaveDelay = 0.1,
    overlayStyle,
    prefixCls = 'rc-tooltip',
    children,
    onVisibleChange,
    afterVisibleChange,
    motion,
    placement = 'right',
    align = {},
    destroyOnHidden = false,
    defaultVisible,
    getTooltipContainer,
    overlayInnerStyle,
    arrowContent,
    overlay,
    id,
    showArrow = true,
    classNames: tooltipClassNames,
    styles: tooltipStyles,
    ...restProps
  } = props;
  const mergedId = useId(id);
  const triggerRef = useRef(null);
  useImperativeHandle(ref, () => triggerRef.current);
  const extraProps = {
    ...restProps
  };
  if ('visible' in props) {
    extraProps.popupVisible = props.visible;
  }
  const getPopupElement = () => /*#__PURE__*/React.createElement(Popup, {
    key: "content",
    prefixCls: prefixCls,
    id: mergedId,
    bodyClassName: tooltipClassNames?.body,
    overlayInnerStyle: {
      ...overlayInnerStyle,
      ...tooltipStyles?.body
    }
  }, overlay);
  const getChildren = () => {
    const child = React.Children.only(children);
    const originalProps = child?.props || {};
    const childProps = {
      ...originalProps,
      'aria-describedby': overlay ? mergedId : null
    };
    return /*#__PURE__*/React.cloneElement(children, childProps);
  };
  return /*#__PURE__*/React.createElement(Trigger, _extends({
    popupClassName: classNames(overlayClassName, tooltipClassNames?.root),
    prefixCls: prefixCls,
    popup: getPopupElement,
    action: trigger,
    builtinPlacements: placements,
    popupPlacement: placement,
    ref: triggerRef,
    popupAlign: align,
    getPopupContainer: getTooltipContainer,
    onOpenChange: onVisibleChange,
    afterOpenChange: afterVisibleChange,
    popupMotion: motion,
    defaultPopupVisible: defaultVisible,
    autoDestroy: destroyOnHidden,
    mouseLeaveDelay: mouseLeaveDelay,
    popupStyle: {
      ...overlayStyle,
      ...tooltipStyles?.root
    },
    mouseEnterDelay: mouseEnterDelay,
    arrow: showArrow
  }, extraProps), getChildren());
});
export default Tooltip;