export type KgNodeType = 'gene' | 'protein' | 'pathway' | 'cell-type';
export type TargetModalityType = 'gene' | 'protein';
export type StratificationType = 'sampleSet' | 'structural-region' | 'structural-presence';
export type KgNodeReason = ('modality-agnostic' | KgNode);
export type KgNodeMethod = 'canonical' | 'data-driven';
export type KgNode = {
    kgId: string;
    nodeType: KgNodeType;
    label: string;
    term?: string;
    altIds?: string[];
    source?: string;
    sourceMethod?: KgNodeMethod;
    sourceVersion?: string;
    reason?: KgNodeReason;
};
export type KgEdge = {
    source: string;
    target: string;
    relation: string;
};
export type KgStratification = {
    name: string;
    stratificationId: string;
    stratificationType: StratificationType;
    sampleSets?: [
        string[],
        string[]
    ];
};
export type AutocompleteFeatureFunc = (partial: string, targetModality: null | TargetModalityType) => Promise<KgNode[]>;
export type TransformFeatureFunc = (node: KgNode, targetModality: TargetModalityType) => Promise<KgNode[]>;
export type RelatedFeaturesFunc = (node: KgNode) => Promise<KgNode[]>;
export type FeatureToUrlFunc = (node: KgNode) => Promise<string>;
export type FeatureToIntervalFunc = (node: KgNode, assembly: string) => Promise<{
    chr: string;
    start: number;
    end: number;
}>;
export type ObsSetToFeaturesFunc = (node: KgNode) => Promise<KgNode[]>;
export type FeaturesToObsSetFunc = (nodes: KgNode[]) => Promise<KgNode>;
export type GetAlternativeTermsFunc = (curie: string) => Promise<string[]>;
export type GetTermMappingFunc = (keyCuriePrefix: string, valCuriePrefix: string) => Promise<Map<string, string>>;
//# sourceMappingURL=biomarkers.d.ts.map