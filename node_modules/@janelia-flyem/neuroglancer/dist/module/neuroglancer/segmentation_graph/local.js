import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
import _Set from 'babel-runtime/core-js/set';
import _Map from 'babel-runtime/core-js/map';
/**
 * @license
 * Copyright 2021 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import debounce from 'lodash/debounce';
import { SegmentationGraphSource, SegmentationGraphSourceConnection, VisibleSegmentEquivalencePolicy } from './source';
import { SharedDisjointUint64Sets } from '../shared_disjoint_sets';
import { DisjointUint64Sets } from '../util/disjoint_sets';
import { parseArray } from '../util/json';
import { Signal } from '../util/signal';
import { Uint64 } from '../util/uint64';
export class LocalSegmentationGraphSource extends SegmentationGraphSource {
    constructor() {
        super(...arguments);
        this.spanningTreeEdges = new _Map();
        this.equivalences = new SharedDisjointUint64Sets();
        this.connections = new _Set();
        this.changed = new Signal();
    }
    link(a, b) {
        this.equivalences.link(a, b);
        for (const connection of this.connections) {
            connection.segmentsState.segmentEquivalences.link(a, b);
        }
    }
    linkAll(ids) {
        this.equivalences.linkAll(ids);
        for (const connection of this.connections) {
            connection.segmentsState.segmentEquivalences.linkAll(ids);
        }
    }
    deleteSet(a) {
        this.equivalences.deleteSet(a);
        for (const connection of this.connections) {
            connection.segmentsState.segmentEquivalences.deleteSet(a);
        }
    }
    normalizeAll() {
        for (const connection of this.connections) {
            normalizeSegmentSet(connection.segmentsState.visibleSegments, connection.segmentsState.segmentEquivalences.disjointSets);
        }
    }
    addSpanningTreeEdge(a, b) {
        const aString = a.toString(),
              bString = b.toString();
        const spanningTreeEdges = this.spanningTreeEdges;

        let aEdges = spanningTreeEdges.get(aString);
        if (aEdges === undefined) {
            aEdges = new _Set();
            spanningTreeEdges.set(aString, aEdges);
        }
        let bEdges = spanningTreeEdges.get(bString);
        if (bEdges === undefined) {
            bEdges = new _Set();
            spanningTreeEdges.set(bString, bEdges);
        }
        aEdges.add(bString);
        bEdges.add(aString);
    }
    removeSpanningTreeEdge(a, b) {
        const aString = a.toString(),
              bString = b.toString();
        const spanningTreeEdges = this.spanningTreeEdges;

        const aEdges = spanningTreeEdges.get(aString);
        const bEdges = spanningTreeEdges.get(bString);
        aEdges.delete(bString);
        if (aEdges.size === 0) {
            spanningTreeEdges.delete(aString);
        }
        bEdges.delete(aString);
        if (bEdges.size === 0) {
            spanningTreeEdges.delete(bString);
        }
    }
    *getSpanningTreeNeighbors(a) {
        const b = new Uint64();
        const neighbors = this.spanningTreeEdges.get(a.toString());
        if (neighbors === undefined) return;
        for (const neighborString of neighbors) {
            b.parseString(neighborString);
            yield b;
        }
    }
    restoreState(obj) {
        const equivalences = this.equivalences,
              spanningTreeEdges = this.spanningTreeEdges;

        equivalences.clear();
        spanningTreeEdges.clear();
        if (obj === undefined) {
            return;
        }
        const ids = [new Uint64(), new Uint64()];
        parseArray(obj, groupObj => {
            parseArray(groupObj, (s, index) => {
                ids[index % 2].parseString(String(s), 10);
                if (index !== 0) {
                    if (equivalences.link(ids[0], ids[1])) {
                        this.addSpanningTreeEdge(ids[0], ids[1]);
                    }
                }
            });
        });
    }
    toJSON() {
        const spanningTreeEdges = this.spanningTreeEdges;

        if (spanningTreeEdges.size === 0) return undefined;
        const sets = new Array();
        for (let _ref of spanningTreeEdges) {
            var _ref2 = _slicedToArray(_ref, 2);

            let idString = _ref2[0];
            let neighbors = _ref2[1];

            const a = Uint64.parseString(idString);
            for (const neighborString of neighbors) {
                const b = Uint64.parseString(neighborString);
                if (Uint64.compare(a, b) > 0) continue;
                sets.push([a, b]);
            }
        }
        sets.sort((a, b) => Uint64.compare(a[0], b[0]) || Uint64.compare(a[1], b[1]));
        return sets.map(set => set.map(element => element.toString()));
    }
    get visibleSegmentEquivalencePolicy() {
        return VisibleSegmentEquivalencePolicy.MIN_REPRESENTATIVE;
    }
    async merge(a, b) {
        const equivalences = this.equivalences;

        if (Uint64.equal(equivalences.get(a), equivalences.get(b))) {
            // Already merged.
            return a;
        }
        this.addSpanningTreeEdge(a, b);
        this.link(a, b);
        this.normalizeAll();
        this.changed.dispatch();
        return equivalences.get(a);
    }
    async split(a, b) {
        const result = this.computeSplit(a, b);
        if (result === undefined) {
            throw new Error('Segments are already split');
        }
        const includeBaseSegments = result.includeBaseSegments,
              includeRepresentative = result.includeRepresentative,
              excludeBaseSegments = result.excludeBaseSegments,
              excludeRepresentative = result.excludeRepresentative;
        const equivalences = this.equivalences;

        this.deleteSet(a);
        this.linkAll(includeBaseSegments);
        this.linkAll(excludeBaseSegments);
        const removeSplitEdges = (segments, expectedRoot) => {
            for (const id of segments) {
                for (const neighbor of this.getSpanningTreeNeighbors(id)) {
                    if (!Uint64.equal(equivalences.get(neighbor), expectedRoot)) {
                        this.removeSpanningTreeEdge(id, neighbor);
                    }
                }
            }
        };
        const includeRoot = equivalences.get(a);
        const excludeRoot = equivalences.get(b);
        removeSplitEdges(includeBaseSegments, includeRoot);
        removeSplitEdges(excludeBaseSegments, excludeRoot);
        for (const connection of this.connections) {
            const visibleSegments = connection.segmentsState.visibleSegments;

            if (visibleSegments.has(excludeRepresentative)) {
                visibleSegments.delete(excludeRepresentative);
                visibleSegments.add(includeRepresentative);
            }
        }
        this.normalizeAll();
        this.changed.dispatch();
        return { include: includeRoot, exclude: excludeRoot };
    }
    trackSegment(id, callback) {
        // FIXME: implement
        id;
        callback;
        return () => {};
    }
    computeSplit(include, exclude) {
        const equivalences = this.equivalences;

        const root = equivalences.get(include);
        if (!Uint64.equal(root, equivalences.get(exclude))) {
            // Already split.
            return undefined;
        }
        const ds = new DisjointUint64Sets();
        for (const baseSegment of equivalences.setElements(root)) {
            if (Uint64.equal(baseSegment, exclude)) continue;
            for (const neighbor of this.getSpanningTreeNeighbors(baseSegment)) {
                if (Uint64.equal(neighbor, exclude)) continue;
                ds.link(baseSegment, neighbor);
            }
        }
        const includeSegments = [];
        const excludeSegments = [];
        const includeRoot = ds.get(include);
        let includeRep = include;
        let excludeRep = exclude;
        for (const baseSegment of equivalences.setElements(root)) {
            if (Uint64.equal(ds.get(baseSegment), includeRoot)) {
                includeSegments.push(baseSegment);
                if (Uint64.compare(baseSegment, includeRep) < 0) includeRep = baseSegment;
            } else {
                excludeSegments.push(baseSegment);
                if (Uint64.compare(baseSegment, excludeRep) < 0) excludeRep = baseSegment;
            }
        }
        includeSegments.sort(Uint64.compare);
        excludeSegments.sort(Uint64.compare);
        return {
            includeBaseSegments: includeSegments,
            includeRepresentative: includeRep,
            excludeBaseSegments: excludeSegments,
            excludeRepresentative: excludeRep
        };
    }
    connect(segmentsState) {
        const connection = new LocalSegmentationGraphSourceConnection(this, segmentsState);
        segmentsState.segmentEquivalences.assignFrom(this.equivalences);
        normalizeSegmentSet(segmentsState.visibleSegments, segmentsState.segmentEquivalences.disjointSets);
        connection.registerDisposer(segmentsState.visibleSegments.changed.add(connection.registerCancellable(debounce(() => normalizeSegmentSet(segmentsState.visibleSegments, segmentsState.segmentEquivalences.disjointSets), 0))));
        this.connections.add(connection);
        connection.registerDisposer(() => {
            this.connections.delete(connection);
        });
        return connection;
    }
}
function normalizeSegmentSet(segmentSet, equivalences) {
    const add = [];
    for (const id of segmentSet.unsafeKeys()) {
        const rootId = equivalences.get(id);
        if (!Uint64.equal(id, rootId)) {
            add.push(rootId);
            segmentSet.delete(id);
        }
    }
    for (const id of add) {
        segmentSet.add(id);
    }
}
class LocalSegmentationGraphSourceConnection extends SegmentationGraphSourceConnection {
    computeSplit(include, exclude) {
        return this.graph.computeSplit(include, exclude);
    }
}
//# sourceMappingURL=local.js.map