import _getIterator from 'babel-runtime/core-js/get-iterator';
import _Symbol$iterator from 'babel-runtime/core-js/symbol/iterator';
import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
import _Map from 'babel-runtime/core-js/map';
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { RefCounted } from './disposable';
import { NullarySignal } from './signal';
export class WatchableMap extends RefCounted {
    constructor(register, values) {
        super();
        this.register = register;
        this.changed = new NullarySignal();
        this.disposerMap = new _Map();
        if (values === undefined) {
            this.map = new _Map();
        } else {
            const map = this.map = new _Map(values);
            const disposerMap = this.disposerMap;

            for (const _ref of map) {
                var _ref2 = _slicedToArray(_ref, 2);

                const key = _ref2[0];
                const value = _ref2[1];

                const context = new RefCounted();
                disposerMap.set(key, context);
                register(context, value, key);
            }
        }
    }
    get value() {
        return this.map;
    }
    set(key, value) {
        const map = this.map,
              disposerMap = this.disposerMap;

        let context = disposerMap.get(key);
        if (context !== undefined) {
            context.dispose();
        }
        context = new RefCounted();
        disposerMap.set(key, context);
        map.set(key, value);
        this.register(context, value, key);
        this.changed.dispatch();
        return this;
    }
    delete(key) {
        const map = this.map,
              disposerMap = this.disposerMap;

        const context = disposerMap.get(key);
        if (context !== undefined) {
            context.dispose();
            disposerMap.delete(key);
            map.delete(key);
            this.changed.dispatch();
            return true;
        }
        return false;
    }
    get(key) {
        return this.map.get(key);
    }
    has(key) {
        return this.map.has(key);
    }
    get size() {
        return this.map.size;
    }
    [_Symbol$iterator]() {
        return _getIterator(this.map);
    }
    clear() {
        const map = this.map,
              disposerMap = this.disposerMap;

        if (map.size > 0) {
            for (const disposer of disposerMap.values()) {
                disposer.dispose();
            }
            map.clear();
            disposerMap.clear();
            this.changed.dispatch();
        }
    }
    values() {
        return this.map.values();
    }
    keys() {
        return this.map.keys();
    }
    disposed() {
        const map = this.map,
              disposerMap = this.disposerMap;

        for (const disposer of disposerMap.values()) {
            disposer.dispose();
        }
        map.clear();
        disposerMap.clear();
        super.disposed();
    }
}
//# sourceMappingURL=watchable_map.js.map