import _Number$isInteger from 'babel-runtime/core-js/number/is-integer';
import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _Number$isFinite from 'babel-runtime/core-js/number/is-finite';
/**
 * @license
 * Copyright 2021 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataType } from './data_type';
import { nextAfterFloat64 } from './float';
import { parseFixedLengthArray } from './json';
import { Uint64 } from './uint64';
export const defaultDataTypeRange = {
    [DataType.UINT8]: [0, 0xff],
    [DataType.INT8]: [-0x80, 0x7f],
    [DataType.UINT16]: [0, 0xffff],
    [DataType.INT16]: [-0x8000, 0x7fff],
    [DataType.UINT32]: [0, 0xffffffff],
    [DataType.INT32]: [-0x80000000, 0x7fffffff],
    [DataType.UINT64]: [Uint64.ZERO, new Uint64(0xffffffff, 0xffffffff)],
    [DataType.FLOAT32]: [0, 1]
};
export function computeInvlerp(range, value) {
    if (typeof value === 'number') {
        const minValue = range[0];
        const maxValue = range[1];
        return (value - minValue) / (maxValue - minValue);
    } else {
        const minValue = range[0];
        const maxValue = range[1];
        let numerator;
        if (Uint64.compare(value, minValue) < 0) {
            numerator = -Uint64.subtract(tempUint64, minValue, value).toNumber();
        } else {
            numerator = Uint64.subtract(tempUint64, value, minValue).toNumber();
        }
        let denominator = Uint64.absDifference(tempUint64, maxValue, minValue).toNumber();
        if (Uint64.compare(minValue, maxValue) > 0) denominator *= -1;
        return numerator / denominator;
    }
}
export function computeLerp(range, dataType, value) {
    if (typeof range[0] === 'number') {
        const minValue = range[0];
        const maxValue = range[1];
        let result = minValue * (1 - value) + maxValue * value;
        if (dataType !== DataType.FLOAT32) {
            const dataTypeRange = defaultDataTypeRange[dataType];
            result = Math.round(result);
            result = Math.max(dataTypeRange[0], result);
            result = Math.min(dataTypeRange[1], result);
        }
        return result;
    } else {
        let minValue = range[0];
        let maxValue = range[1];
        if (Uint64.compare(minValue, maxValue) > 0) {
            var _ref = [maxValue, minValue];
            minValue = _ref[0];
            maxValue = _ref[1];

            value = 1 - value;
        }
        const scalar = Uint64.subtract(tempUint64, maxValue, minValue).toNumber();
        const result = new Uint64();
        if (value <= 0) {
            tempUint64.setFromNumber(scalar * -value);
            Uint64.subtract(result, minValue, Uint64.min(tempUint64, minValue));
        } else if (value >= 1) {
            tempUint64.setFromNumber(scalar * (value - 1));
            Uint64.add(result, maxValue, tempUint64);
            if (Uint64.less(result, maxValue)) {
                result.low = result.high = 0xffffffff;
            }
        } else {
            tempUint64.setFromNumber(scalar * value);
            Uint64.add(result, minValue, tempUint64);
            if (Uint64.less(result, minValue)) {
                result.low = result.high = 0xffffffff;
            }
        }
        return result;
    }
}
export function clampToInterval(range, value) {
    if (typeof value === 'number') {
        return Math.min(Math.max(range[0], value), range[1]);
    } else {
        return Uint64.min(Uint64.max(range[0], value), range[1]);
    }
}
export function getClampedInterval(bounds, range) {
    return [clampToInterval(bounds, range[0]), clampToInterval(bounds, range[1])];
}
// Validates that the lower bound is <= the upper bound.
export function validateDataTypeInterval(interval) {
    if (dataTypeCompare(interval[0], interval[1]) <= 0) return interval;
    throw new Error(`Invalid interval: [${interval[0]}, ${interval[1]}]`);
}
// Ensures the lower bound is <= the upper bound.
export function normalizeDataTypeInterval(interval) {
    if (dataTypeCompare(interval[0], interval[1]) <= 0) return interval;
    return [interval[1], interval[0]];
}
export function dataTypeCompare(a, b) {
    if (typeof a === 'number') {
        return a - b;
    } else {
        return Uint64.compare(a, b);
    }
}
const tempUint64 = new Uint64();
const temp2Uint64 = new Uint64();
export function getClosestEndpoint(range, value) {
    if (typeof value === 'number') {
        return Math.abs(value - range[0]) < Math.abs(value - range[1]) ? 0 : 1;
    } else {
        return Uint64.less(Uint64.absDifference(tempUint64, range[0], value), Uint64.absDifference(temp2Uint64, range[1], value)) ? 0 : 1;
    }
}
export function parseDataTypeValue(dataType, x) {
    let s;
    if (typeof x !== 'string') {
        s = '' + x;
    } else {
        s = x;
    }
    switch (dataType) {
        case DataType.UINT64:
            return Uint64.parseString(s);
        case DataType.FLOAT32:
            {
                const value = parseFloat(s);
                if (!_Number$isFinite(value)) {
                    throw new Error(`Invalid float32 value: ${_JSON$stringify(s)}`);
                }
                return value;
            }
        default:
            {
                const value = parseInt(s);
                const dataTypeRange = defaultDataTypeRange[dataType];
                if (!_Number$isInteger(value) || value < dataTypeRange[0] || value > dataTypeRange[1]) {
                    throw new Error(`Invalid ${DataType[dataType].toLowerCase()} value: ${_JSON$stringify(s)}`);
                }
                return value;
            }
    }
}
export function parseDataTypeInterval(obj, dataType) {
    return parseFixedLengthArray(new Array(2), obj, x => parseDataTypeValue(dataType, x));
}
export function dataTypeIntervalEqual(dataType, a, b) {
    if (dataType === DataType.UINT64) {
        return Uint64.equal(a[0], b[0]) && Uint64.equal(a[1], b[1]);
    } else {
        return a[0] === b[0] && a[1] === b[1];
    }
}
export function dataTypeIntervalToJson(range, dataType, defaultRange = defaultDataTypeRange[dataType]) {
    if (dataTypeIntervalEqual(dataType, range, defaultRange)) return undefined;
    if (dataType === DataType.UINT64) {
        return [range[0].toString(), range[1].toString()];
    } else {
        return range;
    }
}
export function dataTypeValueNextAfter(dataType, value, sign) {
    switch (dataType) {
        case DataType.FLOAT32:
            return nextAfterFloat64(value, sign * Infinity);
        case DataType.UINT64:
            const v = value;
            if (sign === -1) {
                if (v.low === 0 && v.high === 0) return v;
                return Uint64.decrement(new Uint64(), v);
            } else {
                if (v.low === 0xffffffff && v.high === 0xffffffff) return v;
                return Uint64.increment(new Uint64(), v);
            }
        default:
            {
                const range = defaultDataTypeRange[dataType];
                return Math.max(range[0], Math.min(range[1], value + sign));
            }
    }
}
// Returns the offset such that within the floating point range `[-offset, 1+offset]`, there is an
// equal-sized interval corresponding to each number in `interval`.
//
// For dataType=FLOAT32, always returns 0.  For integer data types, returns:
//
//   0.5 / (1 + abs(interval[1] - interval[0]))
export function getIntervalBoundsEffectiveOffset(dataType, interval) {
    switch (dataType) {
        case DataType.FLOAT32:
            return 0;
        case DataType.UINT64:
            return 0.5 / Uint64.absDifference(tempUint64, interval[0], interval[1]).toNumber();
        default:
            return 0.5 / Math.abs(interval[0] - interval[1]);
    }
}
export function getIntervalBoundsEffectiveFraction(dataType, interval) {
    switch (dataType) {
        case DataType.FLOAT32:
            return 1;
        case DataType.UINT64:
            {
                const diff = Uint64.absDifference(tempUint64, interval[0], interval[1]).toNumber();
                return diff / (diff + 1);
            }
        default:
            {
                const diff = Math.abs(interval[0] - interval[1]);
                return diff / (diff + 1);
            }
    }
}
//# sourceMappingURL=lerp.js.map