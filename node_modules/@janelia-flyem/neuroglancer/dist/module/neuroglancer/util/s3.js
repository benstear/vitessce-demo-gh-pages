/**
 * @license
 * Copyright 2021 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CachingMapBasedCredentialsManager, CredentialsProvider, makeCredentialsGetter } from '../credentials_provider';
import { uncancelableToken } from './cancellation';
import { cancellableFetchOk } from './http_request';
import { getS3CompatiblePathCompletions } from './s3_bucket_listing';
class S3RegionProvider extends CredentialsProvider {
    constructor(bucket) {
        super();
        this.bucket = bucket;
        this.get = makeCredentialsGetter(async () => {
            var _a;
            const bucket = this.bucket;

            const response = await cancellableFetchOk(`https://s3.amazonaws.com/${bucket}?location`, {}, x => x.text());
            const doc = new DOMParser().parseFromString(response, 'application/xml');
            const locationElement = doc.querySelector('LocationConstraint');
            if (locationElement === null) {
                throw new Error(`Unable to determine location of S3 bucket: ${bucket}`);
            }
            const location = ((_a = locationElement.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || 'us-east-1';
            return { region: location };
        });
    }
}
let s3RegionCache;
export function getS3RegionCredentials(bucket) {
    if (s3RegionCache === undefined) {
        s3RegionCache = new CachingMapBasedCredentialsManager();
        s3RegionCache.register('s3', bucket => new S3RegionProvider(bucket));
    }
    return s3RegionCache.getCredentialsProvider('s3', bucket);
}
export async function cancellableFetchS3Ok(credentialsProvider, bucket, path, requestInit, transformResponse, cancellationToken = uncancelableToken) {
    const credentials = await credentialsProvider.get();
    const region = credentials.credentials.region;

    return await cancellableFetchOk(`https://${bucket}.s3.${region}.amazonaws.com${path}`, requestInit, transformResponse, cancellationToken);
}
export async function getS3PathCompletions(bucket, path, cancellationToken) {
    const credentialsProvider = getS3RegionCredentials(bucket);
    const credentials = await credentialsProvider.get();
    const region = credentials.credentials.region;

    return await getS3CompatiblePathCompletions(undefined, `s3://${bucket}`, `https://${bucket}.s3.${region}.amazonaws.com`, path, cancellationToken);
}
//# sourceMappingURL=s3.js.map