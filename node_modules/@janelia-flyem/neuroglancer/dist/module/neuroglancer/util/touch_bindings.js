import _Map from 'babel-runtime/core-js/map';
import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Facility for triggering named actions in response to touch events.
 */
import throttle from 'lodash/throttle';
import { RefCounted } from './disposable';
import { dispatchEvent, EventActionMap, registerActionListener } from './event_action_map';
/**
 * Minimum number of pixels in x and y that a touch point must move to trigger a
 * translate/rotate/pinch action.  This helps filter out spurious tiny movements that are hard to
 * avoid, especially with one finger touches.
 **/
const moveThreshold = 10;
/**
 * Number of milliseconds that a set of touch points must be held without moving (per moveThreshold)
 * to trigger a touchhold action.
 **/
const holdThreshold = 1000;
/**
 * Maximum duration of a tap.
 */
const maxTapDuration = 400;
/**
 * Maximum number of milliseconds delay between two taps to trigger a multitap action.
 */
const multiTapMaxInterval = 500;
const rotateThreshold = Math.PI / 20;
const pinchThreshold = 20;
const translateThreshold = 10;
function norm2(deltaX, deltaY) {
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
}
function getTwoFingerDistanceAndAngle(touches) {
    var _touches = _slicedToArray(touches, 2);

    let t0 = _touches[0],
        t1 = _touches[1];

    if (t0.identifier > t1.identifier) {
        var _ref = [t0, t1];
        t1 = _ref[0];
        t0 = _ref[1];
    }
    const offsetX = t0.clientX - t1.clientX;
    const offsetY = t0.clientY - t1.clientY;
    const distance = norm2(offsetX, offsetY);
    const angle = Math.atan2(offsetX, offsetY);
    return { distance, angle };
}
function getAngleDifference(x, y) {
    const TAU = Math.PI * 2;
    const d = Math.abs(x - y) % TAU;
    return Math.min(d, TAU - d);
}
export class TouchEventBinder extends RefCounted {
    constructor(target, eventMap) {
        super();
        this.target = target;
        this.eventMap = eventMap;
        this.prevTouches = new _Map();
        this.moved = false;
        /**
         * Initial angle for two-finger touch.  Once the difference between this ange the current angle
         * exceeds `rotateThreshold`, `touchrotate` events are dispatched.
         **/
        this.prevAngle = 0;
        this.rotated = false;
        /**
         * Initial distance for two-finger touch.  Once the difference between this ange the current
         * distance exceeds `pinchThreshold`, `touchpinich` events are dispatched.
         **/
        this.prevDistance = 0;
        this.pinched = false;
        this.prevCenterX = 0;
        this.prevCenterY = 0;
        this.translated = false;
        this.startHold = this.registerCancellable(throttle((event, eventPhase, centerX, centerY) => {
            const info = { event, centerX, centerY };
            this.dispatch(`touchhold${event.targetTouches.length}`, event, info, eventPhase);
        }, holdThreshold, { leading: false, trailing: true }));
        this.numPriorTaps = 0;
        this.priorTapNumTouches = 0;
        this.tapStartTime = 0;
        this.tapEndTime = 0;
        this.curTapNumTouches = 0;
        this.registerEventListener(target, 'touchstart', event => {
            this.handleTouchEvent(event);
        });
        this.registerEventListener(target, 'touchmove', event => {
            this.handleTouchEvent(event);
        });
        this.registerEventListener(target, 'touchend', event => {
            this.handleTouchEvent(event);
        });
    }
    dispatch(eventIdentifier, event, detail, eventPhase = event.eventPhase) {
        dispatchEvent(eventIdentifier, event, eventPhase, detail, this.eventMap);
    }
    handleTouchEvent(event) {
        if (event.target === this.target) {
            event.preventDefault();
        } else {
            return;
        }
        const newTouches = new _Map();
        const prevTouches = this.prevTouches,
              prevEvent = this.prevEvent;
        // Compute average movement.

        let centerX = 0,
            centerY = 0;
        for (const touch of event.targetTouches) {
            newTouches.set(touch.identifier, touch);
            centerX += touch.clientX;
            centerY += touch.clientY;
        }
        centerX /= newTouches.size;
        centerY /= newTouches.size;
        // Remove touches that are no longer matched.
        for (const _ref2 of prevTouches.entries()) {
            var _ref3 = _slicedToArray(_ref2, 2);

            const key = _ref3[0];
            const touch = _ref3[1];

            const newTouch = newTouches.get(key);
            if (newTouch === undefined) {
                prevTouches.delete(key);
            } else {
                const deltaX = newTouch.clientX - touch.clientX;
                const deltaY = newTouch.clientY - touch.clientY;
                if (Math.abs(deltaX) >= moveThreshold || Math.abs(deltaY) >= moveThreshold) {
                    this.moved = true;
                }
            }
        }
        if (prevEvent === undefined || prevEvent.targetTouches.length !== newTouches.size || newTouches.size == 0) {
            this.moved = false;
            if (event.type === 'touchstart') {
                this.startHold(event, event.eventPhase, centerX, centerY);
                if (prevEvent === undefined || prevEvent.targetTouches.length === 0) {
                    this.tapStartTime = Date.now();
                    this.curTapNumTouches = 0;
                }
                this.curTapNumTouches = Math.max(this.curTapNumTouches, event.targetTouches.length);
            } else {
                if (event.type == 'touchend') {
                    const now = Date.now();
                    if (event.targetTouches.length === 0 && now - this.tapStartTime < maxTapDuration) {
                        if (this.curTapNumTouches !== this.priorTapNumTouches || now - this.tapEndTime >= multiTapMaxInterval) {
                            this.numPriorTaps = 0;
                        }
                        ++this.numPriorTaps;
                        this.tapEndTime = now;
                        this.priorTapNumTouches = this.curTapNumTouches;
                        const info = { event, centerX, centerY };
                        this.dispatch(`touchtap${this.curTapNumTouches}x${this.numPriorTaps}`, event, info);
                    }
                }
                this.startHold.cancel();
            }
            // Number of touches has changed.  Don't dispatch any events.
            // TODO: handle tap events
            this.prevTouches = newTouches;
            this.prevEvent = event;
            this.prevCenterX = centerX;
            this.prevCenterY = centerY;
            this.translated = false;
            if (newTouches.size === 2) {
                var _getTwoFingerDistance = getTwoFingerDistanceAndAngle(newTouches.values());

                const distance = _getTwoFingerDistance.distance,
                      angle = _getTwoFingerDistance.angle;

                this.prevDistance = distance;
                this.prevAngle = angle;
                this.rotated = false;
                this.pinched = false;
            }
            return;
        }
        if (!this.moved) {
            return;
        }
        this.tapStartTime = 0;
        this.startHold.cancel();
        this.prevTouches = newTouches;
        this.prevEvent = event;
        let prevCenterX = this.prevCenterX,
            prevCenterY = this.prevCenterY,
            translated = this.translated;

        const deltaX = centerX - prevCenterX;
        const deltaY = centerY - prevCenterY;
        if (translated === false && norm2(deltaX, deltaY) >= translateThreshold) {
            translated = this.translated = true;
        }
        if (translated === true && (deltaX !== 0 || deltaY !== 0)) {
            this.prevCenterX = centerX;
            this.prevCenterY = centerY;
            const info = { event, deltaX, deltaY, centerX, centerY };
            this.dispatch(`touchtranslate${newTouches.size}`, event, info);
        }
        if (newTouches.size === 2) {
            var _getTwoFingerDistance2 = getTwoFingerDistanceAndAngle(newTouches.values());

            const distance = _getTwoFingerDistance2.distance,
                  angle = _getTwoFingerDistance2.angle;
            let pinched = this.pinched,
                rotated = this.rotated,
                prevDistance = this.prevDistance,
                prevAngle = this.prevAngle;

            if (pinched === false && Math.abs(distance - prevDistance) >= pinchThreshold) {
                this.pinched = pinched = true;
            }
            const angleDiff = getAngleDifference(angle, prevAngle);
            if (rotated === false && angleDiff >= rotateThreshold) {
                this.rotated = rotated = true;
            }
            if (pinched === true && distance != prevDistance) {
                this.prevDistance = distance;
                const info = { event, distance, prevDistance, centerX, centerY };
                this.dispatch(`touchpinch`, event, info);
            }
            if (rotated === true && angle !== prevAngle) {
                this.prevAngle = angle;
                this.dispatch(`touchrotate`, event, { event, centerX, centerY, angle, prevAngle });
            }
        }
    }
}
export { EventActionMap, registerActionListener };
//# sourceMappingURL=touch_bindings.js.map