import _Object$assign from 'babel-runtime/core-js/object/assign';
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { defaultStringCompare } from './string';
export const emptyCompletionResult = {
    offset: 0,
    completions: []
};
export function applyCompletionOffset(offset, completionResult) {
    completionResult.offset += offset;
    return completionResult;
}
export function getPrefixMatches(prefix, options) {
    let result = [];
    for (let option of options) {
        if (option.startsWith(prefix)) {
            result.push({ value: option });
        }
    }
    result.sort((a, b) => defaultStringCompare(a.value, b.value));
    return result;
}
export function getPrefixMatchesWithDescriptions(prefix, options, getValue, getDescription) {
    let result = [];
    for (let option of options) {
        let key = getValue(option);
        if (key.startsWith(prefix)) {
            result.push({ value: key, description: getDescription(option) });
        }
    }
    result.sort((a, b) => defaultStringCompare(a.value, b.value));
    return result;
}
export async function completeQueryStringParameters(queryString, keyCompleter, valueCompleter) {
    if (queryString.startsWith('{')) return emptyCompletionResult;
    const m = queryString.match(/^(?:(.*)[&;])?([^&;]*)$/);
    const part = m[2];
    let offset = queryString.length - part.length;
    const equalsIndex = part.indexOf('=');
    if (equalsIndex === -1) {
        const completions = await keyCompleter(part);
        return {
            offset: completions.offset + offset,
            completions: completions.completions.map(x => _Object$assign(_Object$assign({}, x), { value: `${x.value}=` }))
        };
    }
    return applyCompletionOffset(offset + equalsIndex + 1, (await valueCompleter(part.substring(0, equalsIndex), part.substring(equalsIndex + 1))));
}
export async function completeQueryStringParametersFromTable(queryString, table) {
    return completeQueryStringParameters(queryString, async key => {
        const results = [];
        for (const entry of table) {
            const keyEntry = entry.key;
            if (keyEntry.value.startsWith(key)) results.push(keyEntry);
        }
        return { offset: 0, completions: results };
    }, async (key, value) => {
        for (const entry of table) {
            if (entry.key.value !== key) continue;
            return { offset: 0, completions: entry.values.filter(x => x.value.startsWith(value)) };
        }
        return emptyCompletionResult;
    });
}
//# sourceMappingURL=completion.js.map