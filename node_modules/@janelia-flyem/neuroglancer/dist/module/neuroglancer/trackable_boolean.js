/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import debounce from 'lodash/debounce';
import { RefCounted } from './util/disposable';
import { NullarySignal } from './util/signal';
export class TrackableBoolean {
    constructor(value_, defaultValue = value_) {
        this.value_ = value_;
        this.defaultValue = defaultValue;
        this.changed = new NullarySignal();
    }
    get value() {
        return this.value_;
    }
    set value(newValue) {
        if (newValue !== this.value_) {
            this.value_ = newValue;
            this.changed.dispatch();
        }
    }
    toggle() {
        this.value = !this.value;
    }
    toJSON() {
        let value_ = this.value_;

        if (value_ === this.defaultValue) {
            return undefined;
        }
        return this.value_;
    }
    restoreState(x) {
        if (x === true || x === false) {
            this.value = x;
            return;
        }
        this.value = this.defaultValue;
    }
    reset() {
        this.value = this.defaultValue;
    }
}
export class TrackableBooleanCheckbox extends RefCounted {
    constructor(model, options = {}) {
        super();
        this.model = model;
        this.element = document.createElement('input');
        let element = this.element;

        element.type = 'checkbox';
        const updateCheckbox = () => {
            var _a;
            const value = this.model.value;
            this.element.checked = value;
            if (options.enableTitle !== undefined || options.disableTitle !== undefined) {
                this.element.title = (_a = value ? options.enableTitle : options.disableTitle) !== null && _a !== void 0 ? _a : '';
            }
        };
        this.registerDisposer(model.changed.add(updateCheckbox));
        updateCheckbox();
        this.registerEventListener(element, 'change', function (_e) {
            model.value = this.checked;
        });
        // Prevent the checkbox from becoming focused.
        element.addEventListener('mousedown', event => {
            event.preventDefault();
        });
    }
    disposed() {
        let element = this.element;
        let parentElement = element.parentElement;

        if (parentElement) {
            parentElement.removeChild(element);
        }
        super.disposed();
    }
}
export class ElementVisibilityFromTrackableBoolean extends RefCounted {
    constructor(model, element) {
        super();
        this.model = model;
        this.element = element;
        this.initialDisplay = this.element.style.display;
        this.updateVisibility();
        this.registerDisposer(model.changed.add(this.registerCancellable(debounce(() => this.updateVisibility(), 0))));
    }
    updateVisibility() {
        this.element.style.display = this.model.value ? this.initialDisplay : 'none';
    }
}
//# sourceMappingURL=trackable_boolean.js.map