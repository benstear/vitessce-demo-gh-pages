/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Import to register the shared object types.
import '../shared_disjoint_sets';
import '../uint64_set';
import '../uint64_map';
import { ChunkSource } from '../chunk_manager/backend';
import { onTemporaryVisibleSegmentsStateChanged, onVisibleSegmentsStateChanged, VISIBLE_SEGMENTS_STATE_PROPERTIES } from './base';
export function receiveVisibleSegmentsState(rpc, options, target = {}) {
    // No need to increase the reference count of these properties since our owner will hold a
    // reference to their owners.
    for (const property of VISIBLE_SEGMENTS_STATE_PROPERTIES) {
        target[property] = rpc.get(options[property]);
    }
    return target;
}
export const withSegmentationLayerBackendState = Base => class SegmentationLayerState extends Base {
    constructor(...args) {
        const rpc = args[0],
              options = args[1];

        super(rpc, options);
        receiveVisibleSegmentsState(rpc, options, this);
        this.transform = rpc.get(options['transform']);
        this.renderScaleTarget = rpc.get(options['renderScaleTarget']);
        const scheduleUpdateChunkPriorities = () => {
            this.chunkManager.scheduleUpdateChunkPriorities();
        };
        onTemporaryVisibleSegmentsStateChanged(this, this, scheduleUpdateChunkPriorities);
        onVisibleSegmentsStateChanged(this, this, scheduleUpdateChunkPriorities);
        this.registerDisposer(this.transform.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.renderScaleTarget.changed.add(scheduleUpdateChunkPriorities));
    }
};
export class IndexedSegmentPropertySourceBackend extends ChunkSource {
    constructor(rpc, options) {
        super(rpc, options);
        this.properties = options.properties;
    }
}
//# sourceMappingURL=backend.js.map