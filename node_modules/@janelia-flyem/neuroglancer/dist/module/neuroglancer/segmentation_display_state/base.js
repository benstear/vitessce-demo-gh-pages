/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { VisibleSegmentEquivalencePolicy } from '../segmentation_graph/source';
export const VISIBLE_SEGMENTS_STATE_PROPERTIES = ['visibleSegments', 'segmentEquivalences', 'temporaryVisibleSegments', 'temporarySegmentEquivalences', 'useTemporaryVisibleSegments', 'useTemporarySegmentEquivalences'];
export function onVisibleSegmentsStateChanged(context, state, callback) {
    context.registerDisposer(state.visibleSegments.changed.add(callback));
    context.registerDisposer(state.segmentEquivalences.changed.add(callback));
}
export function onTemporaryVisibleSegmentsStateChanged(context, state, callback) {
    context.registerDisposer(state.temporaryVisibleSegments.changed.add(callback));
    context.registerDisposer(state.temporarySegmentEquivalences.changed.add(callback));
    context.registerDisposer(state.useTemporaryVisibleSegments.changed.add(callback));
    context.registerDisposer(state.useTemporarySegmentEquivalences.changed.add(callback));
}
/**
 * Returns a string key for identifying a uint64 object id.  This is faster than
 * Uint64.prototype.toString().
 */
export function getObjectKey(objectId) {
    return `${objectId.low},${objectId.high}`;
}
function isHighBitSegment(segmentId) {
    return segmentId.high >>> 31 ? true : false;
}
export function getVisibleSegments(state) {
    return state.useTemporaryVisibleSegments.value ? state.temporaryVisibleSegments : state.visibleSegments;
}
export function getSegmentEquivalences(state) {
    return state.useTemporarySegmentEquivalences.value ? state.temporarySegmentEquivalences : state.segmentEquivalences;
}
export function forEachVisibleSegment(state, callback) {
    const visibleSegments = getVisibleSegments(state);
    const segmentEquivalences = getSegmentEquivalences(state);
    if (segmentEquivalences.disjointSets) {
        const equivalencePolicy = segmentEquivalences.disjointSets.visibleSegmentEquivalencePolicy.value;
        for (let rootObjectId of visibleSegments.unsafeKeys()) {
            if (equivalencePolicy & VisibleSegmentEquivalencePolicy.NONREPRESENTATIVE_EXCLUDED) {
                const rootObjectId2 = segmentEquivalences.get(rootObjectId);
                callback(rootObjectId, rootObjectId2);
            } else {
                // TODO(jbms): Remove this check if logic is added to ensure that it always holds.
                if (segmentEquivalences.disjointSets === undefined || !segmentEquivalences.disjointSets.isMinElement(rootObjectId)) {
                    continue;
                }
                for (let objectId of segmentEquivalences.setElements(rootObjectId)) {
                    if (equivalencePolicy & VisibleSegmentEquivalencePolicy.REPRESENTATIVE_EXCLUDED && equivalencePolicy & VisibleSegmentEquivalencePolicy.MAX_REPRESENTATIVE && isHighBitSegment(objectId)) {
                        continue;
                    }
                    callback(objectId, rootObjectId);
                }
            }
        }
    }
}
//# sourceMappingURL=base.js.map