import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _Object$assign from 'babel-runtime/core-js/object/assign';
/**
 * @license
 * Copyright 2021 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { verifyBoolean, verifyFiniteFloat, verifyObject, verifyOptionalObjectProperty, verifyPositiveInt } from '../util/json';
import { Signal } from '../util/signal';
export const DEFAULT_SIDE_PANEL_WIDTH = 300;
export const DEFAULT_MIN_SIDE_PANEL_WIDTH = 100;
export const DEFAULT_SIDE_PANEL_LOCATION = {
    side: 'right',
    col: 0,
    row: Infinity,
    flex: 1,
    size: DEFAULT_SIDE_PANEL_WIDTH,
    minSize: DEFAULT_MIN_SIDE_PANEL_WIDTH,
    visible: false
};
export class TrackableSidePanelLocation {
    constructor(defaultValue = DEFAULT_SIDE_PANEL_LOCATION, value = defaultValue) {
        this.defaultValue = defaultValue;
        this.value = value;
        // Indicates that the JSON representation changed.  Note that some changes are just due to
        // normalization and don't affect the actual layout.
        this.changed = new Signal();
        // Indicates that the layout actually changed.
        this.locationChanged = new Signal();
        this.locationChanged.add(this.changed.dispatch);
        const self = this;
        this.watchableVisible = {
            get value() {
                return self.visible;
            },
            set value(value) {
                self.visible = value;
            },
            changed: self.locationChanged
        };
    }
    toJSON(defaultValue = this.defaultValue) {
        const obj = {};
        const value = this.value;

        for (const key in value) {
            if (value[key] === defaultValue[key]) {
                continue;
            }
            obj[key] = value[key];
        }
        return obj;
    }
    get visible() {
        return this.value.visible;
    }
    set visible(visible) {
        const value = this.value;

        if (value.visible !== visible) {
            this.value = _Object$assign(_Object$assign({}, value), { visible });
            this.locationChanged.dispatch();
        }
    }
    reset() {
        if (this.value !== this.defaultValue) {
            this.value = this.defaultValue;
            this.locationChanged.dispatch();
        }
    }
    restoreState(obj, defaultLocation = this.defaultValue) {
        if (obj === undefined) return;
        verifyObject(obj);
        const location = {
            side: verifyOptionalObjectProperty(obj, 'side', x => {
                if (x !== 'left' && x !== 'right' && x !== 'top' && x !== 'bottom') {
                    throw new Error(`Expected "left", "right", "top", or "bottom", but received: ${_JSON$stringify(x)}`);
                }
                return x;
            }, defaultLocation.side),
            col: verifyOptionalObjectProperty(obj, 'col', verifyFiniteFloat, defaultLocation.col),
            row: verifyOptionalObjectProperty(obj, 'row', verifyFiniteFloat, defaultLocation.row),
            flex: verifyOptionalObjectProperty(obj, 'flex', verifyFiniteFloat, defaultLocation.flex),
            size: verifyOptionalObjectProperty(obj, 'size', verifyPositiveInt, defaultLocation.size),
            visible: verifyOptionalObjectProperty(obj, 'visible', verifyBoolean, defaultLocation.visible),
            // minSize cannot be modified.
            minSize: defaultLocation.minSize
        };
        this.value = location;
        this.locationChanged.dispatch();
    }
}
//# sourceMappingURL=side_panel_location.js.map