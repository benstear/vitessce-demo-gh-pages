import _Object$assign from "babel-runtime/core-js/object/assign";
import _Map from "babel-runtime/core-js/map";
import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
import { ChunkRenderLayerBackend } from "./chunk_manager/backend";
import { PROJECTION_PARAMETERS_CHANGED_RPC_METHOD_ID, PROJECTION_PARAMETERS_RPC_ID, RENDERED_VIEW_ADD_LAYER_RPC_ID, RENDERED_VIEW_REMOVE_LAYER_RPC_ID } from "./render_layer_common";
import { RefCounted } from "./util/disposable";
import { Signal } from "./util/signal";
import { registerRPC, registerSharedObject, SharedObjectCounterpart } from "./worker_rpc";
export class RenderLayerBackendAttachment extends RefCounted {
    constructor(view) {
        super();
        this.view = view;
        this.state = undefined;
    }
}
export class RenderLayerBackend extends ChunkRenderLayerBackend {
    constructor() {
        super(...arguments);
        this.attachments = new _Map();
    }
    attach(attachment) {
        attachment;
    }
}
registerRPC(RENDERED_VIEW_ADD_LAYER_RPC_ID, function (x) {
    const view = this.get(x.view);
    const layer = this.get(x.layer);
    const attachment = new RenderLayerBackendAttachment(view);
    layer.attachments.set(view, attachment);
    layer.attach(attachment);
});
registerRPC(RENDERED_VIEW_REMOVE_LAYER_RPC_ID, function (x) {
    const view = this.get(x.view);
    const layer = this.get(x.layer);
    const attachment = layer.attachments.get(view);
    layer.attachments.delete(view);
    attachment.dispose();
});
let SharedProjectionParametersBackend = class SharedProjectionParametersBackend extends SharedObjectCounterpart {
    constructor(rpc, options) {
        super(rpc, options);
        this.changed = new Signal();
        this.value = options.value;
        this.oldValue = _Object$assign({}, this.value);
    }
};
SharedProjectionParametersBackend = __decorate([registerSharedObject(PROJECTION_PARAMETERS_RPC_ID)], SharedProjectionParametersBackend);
export { SharedProjectionParametersBackend };
registerRPC(PROJECTION_PARAMETERS_CHANGED_RPC_METHOD_ID, function (x) {
    const obj = this.get(x.id);
    const value = obj.value,
          oldValue = obj.oldValue;

    _Object$assign(oldValue, value);
    _Object$assign(value, x.value);
    obj.changed.dispatch(oldValue, value);
});
//# sourceMappingURL=render_layer_backend.js.map