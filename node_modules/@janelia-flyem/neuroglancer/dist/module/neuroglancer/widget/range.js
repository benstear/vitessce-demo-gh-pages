
import { RefCounted } from '../util/disposable'; /**
                                                  * @license
                                                  * Copyright 2016 Google Inc.
                                                  * Licensed under the Apache License, Version 2.0 (the "License");
                                                  * you may not use this file except in compliance with the License.
                                                  * You may obtain a copy of the License at
                                                  *
                                                  *      http://www.apache.org/licenses/LICENSE-2.0
                                                  *
                                                  * Unless required by applicable law or agreed to in writing, software
                                                  * distributed under the License is distributed on an "AS IS" BASIS,
                                                  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                  * See the License for the specific language governing permissions and
                                                  * limitations under the License.
                                                  */

import { removeFromParent } from '../util/dom';
export class RangeWidget extends RefCounted {
    constructor(value, { min = 0, max = 1, step = 0.01 } = {}) {
        super();
        this.value = value;
        this.element = document.createElement('label');
        this.inputElement = document.createElement('input');
        this.numericInputElement = document.createElement('input');
        let element = this.element,
            inputElement = this.inputElement,
            numericInputElement = this.numericInputElement;

        element.className = 'range-slider';
        const initInputElement = el => {
            el.min = '' + min;
            el.max = '' + max;
            el.step = '' + step;
            el.valueAsNumber = this.value.value;
            this.registerEventListener(el, 'change', () => this.inputValueChanged(el));
            this.registerEventListener(el, 'input', () => this.inputValueChanged(el));
            this.registerEventListener(el, 'wheel', event => {
                this.adjustViaWheel(el, event);
            });
        };
        inputElement.type = 'range';
        initInputElement(inputElement);
        numericInputElement.type = 'number';
        const maxNumberWidth = Math.max(min.toString().length, max.toString().length, Math.min(max, min + step).toString().length, Math.max(min, max - step).toString().length);
        numericInputElement.style.width = maxNumberWidth + 2 + 'ch';
        initInputElement(numericInputElement);
        element.appendChild(inputElement);
        element.appendChild(numericInputElement);
        value.changed.add(() => {
            this.inputElement.valueAsNumber = this.value.value;
            this.numericInputElement.valueAsNumber = this.value.value;
        });
    }
    inputValueChanged(element) {
        this.value.value = element.valueAsNumber;
    }
    adjustViaWheel(element, event) {
        const el = this.inputElement;
        let deltaY = event.deltaY;

        if (deltaY > 0) {
            el.stepUp();
            this.inputValueChanged(element);
        } else if (deltaY < 0) {
            el.stepDown();
            this.inputValueChanged(element);
        }
    }
    disposed() {
        removeFromParent(this.element);
        super.disposed();
    }
}
//# sourceMappingURL=range.js.map