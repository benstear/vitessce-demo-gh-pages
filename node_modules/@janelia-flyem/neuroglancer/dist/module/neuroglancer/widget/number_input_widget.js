import _Number$isNaN from 'babel-runtime/core-js/number/is-nan';
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TrackableValue } from '../trackable_value';
import { RefCounted } from '../util/disposable';
import { removeFromParent } from '../util/dom';
export class NumberInputWidget extends RefCounted {
    constructor(model, options = {}) {
        super();
        this.model = model;
        this.element = document.createElement('label');
        this.inputElement = document.createElement('input');
        let validator = options.validator,
            label = options.label;
        const element = this.element,
              inputElement = this.inputElement;

        if (validator === undefined) {
            if (model instanceof TrackableValue) {
                validator = model.validator;
            } else {
                validator = x => x;
            }
        }
        this.validator = validator;
        if (label !== undefined) {
            element.textContent = label;
        }
        element.appendChild(inputElement);
        element.className = 'neuroglancer-number-input';
        inputElement.type = 'text';
        this.registerDisposer(this.model.changed.add(() => this.updateView()));
        this.registerEventListener(inputElement, 'change', () => this.updateModel());
        this.updateView();
    }
    updateView() {
        this.inputElement.value = '' + this.model.value;
    }
    updateModel() {
        let value = parseFloat(this.inputElement.value.trim());
        if (_Number$isNaN(value)) {
            this.updateView();
            return;
        }
        try {
            value = this.validator(value);
            this.model.value = value;
        } catch (_a) {
            this.updateView();
        }
    }
    disposed() {
        removeFromParent(this.element);
        super.disposed();
    }
}
//# sourceMappingURL=number_input_widget.js.map