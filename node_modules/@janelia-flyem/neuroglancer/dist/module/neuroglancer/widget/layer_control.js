
import { makeToolActivationStatusMessageWithHeader, registerLayerTool, Tool, ToolBindingWidget } from '../ui/tool'; /**
                                                                                                                     * @license
                                                                                                                     * Copyright 2021 Google Inc.
                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                     * You may obtain a copy of the License at
                                                                                                                     *
                                                                                                                     *      http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                     *
                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                     * limitations under the License.
                                                                                                                     */

import { WatchableVisibilityPriority } from '../visibility_priority/frontend';
import { DependentViewWidget } from './dependent_view_widget';
function makeControl(context, layer, options, visibility) {
    const controlContainer = document.createElement('label');
    controlContainer.classList.add('neuroglancer-layer-control-container');
    const labelContainer = document.createElement('div');
    labelContainer.classList.add('neuroglancer-layer-control-label-container');
    const label = document.createElement('div');
    label.classList.add('neuroglancer-layer-control-label');
    labelContainer.appendChild(label);
    const labelTextContainer = document.createElement('div');
    labelTextContainer.classList.add('neuroglancer-layer-control-label-text-container');
    labelTextContainer.appendChild(document.createTextNode(options.label));
    label.appendChild(labelTextContainer);
    if (options.title) {
        label.title = options.title;
    }
    controlContainer.appendChild(labelContainer);

    var _options$makeControl = options.makeControl(layer, context, { labelContainer, labelTextContainer, display: layer.manager.root.display, visibility });

    const control = _options$makeControl.control,
          controlElement = _options$makeControl.controlElement;

    controlElement.classList.add('neuroglancer-layer-control-control');
    controlContainer.appendChild(controlElement);
    return { controlContainer, label, labelContainer, labelTextContainer, control };
}
export class LayerControlTool extends Tool {
    constructor(layer, options) {
        super(layer);
        this.options = options;
    }
    activate(activation) {
        const options = this.options;
        const layer = this.layer;
        const isValid = options.isValid;

        if (isValid !== undefined && !isValid(layer).value) return;

        var _makeToolActivationSt = makeToolActivationStatusMessageWithHeader(activation);

        const header = _makeToolActivationSt.header,
              body = _makeToolActivationSt.body;

        var _makeControl = makeControl(activation, layer, options, new WatchableVisibilityPriority(WatchableVisibilityPriority.VISIBLE));

        const controlContainer = _makeControl.controlContainer,
              control = _makeControl.control,
              labelContainer = _makeControl.labelContainer;

        header.appendChild(labelContainer);
        body.appendChild(controlContainer);
        options.activateTool(activation, control);
    }
    get description() {
        var _a;
        const options = this.options;

        return (_a = options.toolDescription) !== null && _a !== void 0 ? _a : options.label;
    }
    toJSON() {
        return this.options.toolJson;
    }
}
function makeLayerControlToOptionsTab(context, layer, options, visibility) {
    var _makeControl2 = makeControl(context, layer, options, visibility);

    const controlContainer = _makeControl2.controlContainer,
          label = _makeControl2.label;

    controlContainer.classList.add('neuroglancer-layer-options-control-container');
    label.prepend(context.registerDisposer(new ToolBindingWidget(layer, options.toolJson)).element);
    return controlContainer;
}
export function addLayerControlToOptionsTab(context, layer, visibility, options) {
    const isValid = options.isValid;

    if (isValid === undefined) {
        return makeLayerControlToOptionsTab(context, layer, options, visibility);
    }
    return context.registerDisposer(new DependentViewWidget(isValid(layer), (valid, parent, context) => {
        if (!valid) return;
        parent.appendChild(makeLayerControlToOptionsTab(context, layer, options, visibility));
    }, visibility)).element;
}
export function registerLayerControl(layerType, options) {
    const toolJson = options.toolJson;

    const toolId = typeof toolJson === 'string' ? toolJson : toolJson.type;
    registerLayerTool(layerType, toolId, layer => new LayerControlTool(layer, options));
}
//# sourceMappingURL=layer_control.js.map