import _Object$keys from 'babel-runtime/core-js/object/keys';
import _Map from 'babel-runtime/core-js/map';
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { RefCounted } from '../util/disposable';
export class EnumSelectWidget extends RefCounted {
    constructor(model) {
        super();
        this.model = model;
        this.element = document.createElement('select');
        this.valueIndexMap = new _Map();
        const element = this.element,
              valueIndexMap = this.valueIndexMap;

        let index = 0;
        for (const key of _Object$keys(model.enumType)) {
            if (isNaN(Number(key))) {
                const option = document.createElement('option');
                option.textContent = option.value = key.toLowerCase();
                element.appendChild(option);
                valueIndexMap.set(model.enumType[key], index);
                ++index;
            }
        }
        this.registerDisposer(model.changed.add(() => this.updateView()));
        this.registerEventListener(element, 'change', () => this.updateModel());
        this.registerEventListener(element, 'wheel', event => {
            event.preventDefault();
            event.stopPropagation();
            this.adjustViaWheel(event);
        });
        this.updateView();
    }
    adjustViaWheel(event) {
        const element = this.element;
        let deltaY = event.deltaY;

        if (deltaY > 0) {
            element.selectedIndex = (element.options.length + element.selectedIndex - 1) % element.options.length;
            this.updateModel();
        } else if (deltaY < 0) {
            element.selectedIndex = (element.options.length + element.selectedIndex + 1) % element.options.length;
            this.updateModel();
        }
    }
    updateView() {
        const element = this.element;

        element.selectedIndex = this.valueIndexMap.get(this.model.value);
    }
    updateModel() {
        this.model.restoreState(this.element.value);
    }
}
//# sourceMappingURL=enum_widget.js.map