/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { animationFrameDebounce } from '../util/animation_frame_debounce';
import { RefCounted } from '../util/disposable';
import { removeChildren } from '../util/dom';
import { WatchableVisibilityPriority } from '../visibility_priority/frontend';
export class DependentViewContext extends RefCounted {
    constructor(redraw) {
        super();
        this.redraw = redraw;
    }
}
export class DependentViewWidget extends RefCounted {
    constructor(model, render, visibility = new WatchableVisibilityPriority(WatchableVisibilityPriority.VISIBLE)) {
        super();
        this.model = model;
        this.render = render;
        this.visibility = visibility;
        this.element = document.createElement('div');
        this.generation = -1;
        this.currentViewDisposer = undefined;
        this.debouncedUpdateView = this.registerCancellable(animationFrameDebounce(() => this.updateView()));
        this.element.style.display = 'contents';
        this.registerDisposer(model.changed.add(this.debouncedUpdateView));
        this.registerDisposer(visibility.changed.add(() => {
            if (this.visible) this.debouncedUpdateView();
        }));
        this.updateView();
    }
    get visible() {
        return this.visibility.visible;
    }
    updateView() {
        if (!this.visible) return;
        const model = this.model;

        const generation = model.changed.count;
        if (generation === this.generation) return;
        this.disposeCurrentView();
        const currentViewDisposer = this.currentViewDisposer = new DependentViewContext(this.debouncedUpdateView);
        this.render(model.value, this.element, currentViewDisposer);
    }
    disposeCurrentView() {
        let currentViewDisposer = this.currentViewDisposer;

        if (currentViewDisposer !== undefined) {
            currentViewDisposer.dispose();
        }
        removeChildren(this.element);
    }
    disposed() {
        this.disposeCurrentView();
        super.disposed();
    }
}
//# sourceMappingURL=dependent_view_widget.js.map