import _Map from "babel-runtime/core-js/map";
import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
import { WithParameters } from "../../chunk_manager/backend";
import { WithSharedCredentialsProviderCounterpart } from "../../credentials_provider/shared_counterpart";
import { fetchWithBossCredentials } from "./api";
import { MeshSourceParameters, VolumeChunkSourceParameters } from "./base";
import { assignMeshFragmentData, decodeJsonManifestChunk, decodeTriangleVertexPositionsAndIndices, MeshSource } from "../../mesh/backend";
import { decodeBossNpzChunk } from "../../sliceview/backend_chunk_decoders/bossNpz";
import { decodeJpegChunk } from "../../sliceview/backend_chunk_decoders/jpeg";
import { VolumeChunkSource } from "../../sliceview/volume/backend";
import { Endianness } from "../../util/endian";
import { cancellableFetchOk, responseArrayBuffer } from "../../util/http_request";
import { registerSharedObject } from "../../worker_rpc";
let chunkDecoders = new _Map();
chunkDecoders.set('npz', decodeBossNpzChunk);
chunkDecoders.set('jpeg', decodeJpegChunk);
let acceptHeaders = new _Map();
acceptHeaders.set('npz', 'application/npygz');
acceptHeaders.set('jpeg', 'image/jpeg');
function BossSource(Base, parametersConstructor) {
    return WithParameters(WithSharedCredentialsProviderCounterpart()(Base), parametersConstructor);
}
let BossVolumeChunkSource = class BossVolumeChunkSource extends BossSource(VolumeChunkSource, VolumeChunkSourceParameters) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
    }
    async download(chunk, cancellationToken) {
        let parameters = this.parameters;

        let url = `${parameters.baseUrl}/latest/cutout/${parameters.collection}/${parameters.experiment}/${parameters.channel}/${parameters.resolution}`;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            let chunkPosition = this.computeChunkBounds(chunk);
            let chunkDataSize = chunk.chunkDataSize;
            for (let i = 0; i < 3; ++i) {
                url += `/${chunkPosition[i]}:${chunkPosition[i] + chunkDataSize[i]}`;
            }
        }
        url += '/';
        if (parameters.window !== undefined) {
            url += `?window=${parameters.window[0]},${parameters.window[1]}`;
        }
        const response = await fetchWithBossCredentials(this.credentialsProvider, url, { headers: { 'Accept': acceptHeaders.get(parameters.encoding) } }, responseArrayBuffer, cancellationToken);
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
BossVolumeChunkSource = __decorate([registerSharedObject()], BossVolumeChunkSource);
export { BossVolumeChunkSource };
function decodeManifestChunk(chunk, response) {
    return decodeJsonManifestChunk(chunk, response, 'fragments');
}
function decodeFragmentChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    assignMeshFragmentData(chunk, decodeTriangleVertexPositionsAndIndices(response, Endianness.LITTLE, /*vertexByteOffset=*/4, numVertices));
}
let BossMeshSource = class BossMeshSource extends BossSource(MeshSource, MeshSourceParameters) {
    download(chunk, cancellationToken) {
        const parameters = this.parameters;

        return cancellableFetchOk(`${parameters.baseUrl}${chunk.objectId}`, {}, responseArrayBuffer, cancellationToken).then(response => decodeManifestChunk(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        const parameters = this.parameters;

        return cancellableFetchOk(`${parameters.baseUrl}${chunk.fragmentId}`, {}, responseArrayBuffer, cancellationToken).then(response => decodeFragmentChunk(chunk, response));
    }
};
BossMeshSource = __decorate([registerSharedObject()], BossMeshSource);
export { BossMeshSource };
//# sourceMappingURL=backend.js.map