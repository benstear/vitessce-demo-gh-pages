import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2020 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
import { decodeBlosc } from "../../async_computation/decode_blosc_request";
import { decodeGzip } from "../../async_computation/decode_gzip_request";
import { requestAsyncComputation } from "../../async_computation/request";
import { WithParameters } from "../../chunk_manager/backend";
import { WithSharedCredentialsProviderCounterpart } from "../../credentials_provider/shared_counterpart";
import { VolumeChunkSourceParameters, ZarrCompressor } from "./base";
import { decodeRawChunk } from "../../sliceview/backend_chunk_decoders/raw";
import { VolumeChunkSource } from "../../sliceview/volume/backend";
import { responseArrayBuffer } from "../../util/http_request";
import { cancellableFetchSpecialOk } from "../../util/special_protocol_request";
import { registerSharedObject } from "../../worker_rpc";
async function decodeChunk(chunk, cancellationToken, response, encoding) {
    let buffer = new Uint8Array(response);
    switch (encoding.compressor) {
        case ZarrCompressor.GZIP:
            buffer = await requestAsyncComputation(decodeGzip, cancellationToken, [buffer.buffer], buffer);
            break;
        case ZarrCompressor.RAW:
            break;
        case ZarrCompressor.BLOSC:
            buffer = await requestAsyncComputation(decodeBlosc, cancellationToken, [buffer.buffer], buffer);
    }
    await decodeRawChunk(chunk, cancellationToken, buffer.buffer, encoding.endianness);
}
let PrecomputedVolumeChunkSource = class PrecomputedVolumeChunkSource extends WithParameters(WithSharedCredentialsProviderCounterpart()(VolumeChunkSource), VolumeChunkSourceParameters) {
    async download(chunk, cancellationToken) {
        chunk.chunkDataSize = this.spec.chunkDataSize;
        const parameters = this.parameters;
        const chunkGridPosition = chunk.chunkGridPosition;
        let url = parameters.url,
            separator = parameters.separator;

        const rank = this.spec.rank;
        for (let i = rank; i > 0; --i) {
            url += `${i == rank ? '/' : separator}${chunkGridPosition[i - 1]}`;
        }
        const response = await cancellableFetchSpecialOk(this.credentialsProvider, url, {}, responseArrayBuffer, cancellationToken);
        await decodeChunk(chunk, cancellationToken, response, parameters.encoding);
    }
};
PrecomputedVolumeChunkSource = __decorate([registerSharedObject()], PrecomputedVolumeChunkSource);
export { PrecomputedVolumeChunkSource };
//# sourceMappingURL=backend.js.map