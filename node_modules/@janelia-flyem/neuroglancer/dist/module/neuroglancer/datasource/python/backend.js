import _Promise from "babel-runtime/core-js/promise";
import _Map from "babel-runtime/core-js/map";
import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
import { WithParameters } from "../../chunk_manager/backend";
import { MeshSourceParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeChunkSourceParameters } from "./base";
import { assignMeshFragmentData, decodeTriangleVertexPositionsAndIndices, MeshSource } from "../../mesh/backend";
import { SkeletonSource } from "../../skeleton/backend";
import { decodeSkeletonChunk } from "../../skeleton/decode_precomputed_skeleton";
import { decodeJpegChunk } from "../../sliceview/backend_chunk_decoders/jpeg";
import { decodeNdstoreNpzChunk } from "../../sliceview/backend_chunk_decoders/ndstoreNpz";
import { decodeRawChunk } from "../../sliceview/backend_chunk_decoders/raw";
import { VolumeChunkSource } from "../../sliceview/volume/backend";
import { Endianness } from "../../util/endian";
import { cancellableFetchOk, responseArrayBuffer } from "../../util/http_request";
import { registerSharedObject } from "../../worker_rpc";
let chunkDecoders = new _Map();
chunkDecoders.set(VolumeChunkEncoding.NPZ, decodeNdstoreNpzChunk);
chunkDecoders.set(VolumeChunkEncoding.JPEG, decodeJpegChunk);
chunkDecoders.set(VolumeChunkEncoding.RAW, decodeRawChunk);
let PythonVolumeChunkSource = class PythonVolumeChunkSource extends WithParameters(VolumeChunkSource, VolumeChunkSourceParameters) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters['encoding']);
        this.encoding = VolumeChunkEncoding[this.parameters.encoding].toLowerCase();
    }
    async download(chunk, cancellationToken) {
        let parameters = this.parameters;

        let path = `../../neuroglancer/${this.encoding}/${parameters.key}/${parameters.scaleKey}`;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            let chunkPosition = this.computeChunkBounds(chunk);
            const chunkDataSize = chunk.chunkDataSize;
            const length = chunkPosition.length;
            path += `/${chunkPosition.join()}/`;
            for (let i = 0; i < length; ++i) {
                if (i !== 0) path += ',';
                path += (chunkPosition[i] + chunkDataSize[i]).toString();
            }
        }
        const response = await cancellableFetchOk(path, {}, responseArrayBuffer, cancellationToken);
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
PythonVolumeChunkSource = __decorate([registerSharedObject()], PythonVolumeChunkSource);
export { PythonVolumeChunkSource };
export function decodeFragmentChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    assignMeshFragmentData(chunk, decodeTriangleVertexPositionsAndIndices(response, Endianness.LITTLE, /*vertexByteOffset=*/4, numVertices));
}
let PythonMeshSource = class PythonMeshSource extends WithParameters(MeshSource, MeshSourceParameters) {
    download(chunk) {
        // No manifest chunk to download, as there is always only a single fragment.
        chunk.fragmentIds = [''];
        return _Promise.resolve(undefined);
    }
    downloadFragment(chunk, cancellationToken) {
        let parameters = this.parameters;

        let requestPath = `../../neuroglancer/mesh/${parameters.key}/${chunk.manifestChunk.objectId}`;
        return cancellableFetchOk(requestPath, {}, responseArrayBuffer, cancellationToken).then(response => decodeFragmentChunk(chunk, response));
    }
};
PythonMeshSource = __decorate([registerSharedObject()], PythonMeshSource);
export { PythonMeshSource };
let PythonSkeletonSource = class PythonSkeletonSource extends WithParameters(SkeletonSource, SkeletonSourceParameters) {
    download(chunk, cancellationToken) {
        const parameters = this.parameters;

        let requestPath = `../../neuroglancer/skeleton/${parameters.key}/${chunk.objectId}`;
        return cancellableFetchOk(requestPath, {}, responseArrayBuffer, cancellationToken).then(response => decodeSkeletonChunk(chunk, response, parameters.vertexAttributes));
    }
};
PythonSkeletonSource = __decorate([registerSharedObject()], PythonSkeletonSource);
export { PythonSkeletonSource };
//# sourceMappingURL=backend.js.map