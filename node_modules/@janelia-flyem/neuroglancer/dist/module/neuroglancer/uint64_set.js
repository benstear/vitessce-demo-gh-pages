import _Symbol$iterator from "babel-runtime/core-js/symbol/iterator";
import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
var Uint64Set_1;
import { HashSetUint64 } from "./gpu_hash/hash_table";
import { Signal } from "./util/signal";
import { registerRPC, registerSharedObject, SharedObjectCounterpart } from "./worker_rpc";
let Uint64Set = Uint64Set_1 = class Uint64Set extends SharedObjectCounterpart {
    constructor() {
        super(...arguments);
        this.hashTable = new HashSetUint64();
        this.changed = new Signal();
    }
    get value() {
        return this;
    }
    static makeWithCounterpart(rpc) {
        let obj = new Uint64Set_1();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    set(x, value) {
        if (!value) {
            this.delete(x);
        } else {
            this.add(x);
        }
    }
    reserve_(x) {
        return this.hashTable.reserve(x);
    }
    reserve(x) {
        if (this.reserve_(x)) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.reserve', { 'id': this.rpcId, 'value': x });
            }
        }
    }
    add_(x) {
        let changed = false;
        for (const v of x) {
            changed = this.hashTable.add(v) || changed;
        }
        return changed;
    }
    add(x) {
        const tmp = Array().concat(x);
        if (this.add_(tmp)) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.add', { 'id': this.rpcId, 'value': tmp });
            }
            this.changed.dispatch(x, true);
        }
    }
    has(x) {
        return this.hashTable.has(x);
    }
    [_Symbol$iterator]() {
        return this.hashTable.keys();
    }
    unsafeKeys() {
        return this.hashTable.unsafeKeys();
    }
    delete_(x) {
        let changed = false;
        for (const v of x) {
            changed = this.hashTable.delete(v) || changed;
        }
        return changed;
    }
    delete(x) {
        const tmp = Array().concat(x);
        if (this.delete_(Array().concat(x))) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.delete', { 'id': this.rpcId, 'value': tmp });
            }
            this.changed.dispatch(x, false);
        }
    }
    get size() {
        return this.hashTable.size;
    }
    clear() {
        if (this.hashTable.clear()) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.clear', { 'id': this.rpcId });
            }
            this.changed.dispatch(null, false);
        }
    }
    toJSON() {
        let result = new Array();
        for (let id of this.unsafeKeys()) {
            result.push(id.toString());
        }
        // Need to sort entries, otherwise serialization changes every time.
        result.sort();
        return result;
    }
    assignFrom(other) {
        this.clear();
        for (const key of other.unsafeKeys()) {
            this.add(key);
        }
    }
};
Uint64Set = Uint64Set_1 = __decorate([registerSharedObject('Uint64Set')], Uint64Set);
export { Uint64Set };
registerRPC('Uint64Set.reserve', function (x) {
    let obj = this.get(x['id']);
    if (obj.reserve_(x['value'])) {
        obj.changed.dispatch();
    }
});
registerRPC('Uint64Set.add', function (x) {
    let obj = this.get(x['id']);
    if (obj.add_(x['value'])) {
        obj.changed.dispatch();
    }
});
registerRPC('Uint64Set.delete', function (x) {
    let obj = this.get(x['id']);
    if (obj.delete_(x['value'])) {
        obj.changed.dispatch();
    }
});
registerRPC('Uint64Set.clear', function (x) {
    let obj = this.get(x['id']);
    if (obj.hashTable.clear()) {
        obj.changed.dispatch();
    }
});
//# sourceMappingURL=uint64_set.js.map