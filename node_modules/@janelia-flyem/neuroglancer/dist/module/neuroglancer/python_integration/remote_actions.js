import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _Set from 'babel-runtime/core-js/set';
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Facility for remote action handling.
 */
import debounce from 'lodash/debounce';
import { TrackableValue } from '../trackable_value';
import { RefCounted } from '../util/disposable';
import { registerActionListener } from '../util/event_action_map';
import { verifyStringArray } from '../util/json';
import { Signal } from '../util/signal';
import { getCachedJson } from '../util/trackable';
export class RemoteActionHandler extends RefCounted {
    constructor(viewer) {
        super();
        this.viewer = viewer;
        this.actionSet = new TrackableValue(new _Set(), x => new _Set(verifyStringArray(x)));
        this.actionDisposers = [];
        this.sendActionRequested = new Signal();
        this.actionSet.changed.add(debounce(() => this.updateActions(), 0));
    }
    clearListeners() {
        for (const disposer of this.actionDisposers) {
            disposer();
        }
        this.actionDisposers.length = 0;
    }
    disposed() {
        this.clearListeners();
        super.disposed();
    }
    updateActions() {
        this.clearListeners();
        for (const action of this.actionSet.value) {
            this.actionDisposers.push(registerActionListener(this.viewer.element, action, () => this.handleAction(action)));
        }
    }
    handleAction(action) {
        var _viewer = this.viewer;
        const mouseState = _viewer.mouseState,
              layerSelectedValues = _viewer.layerSelectedValues;

        const actionState = {};
        if (mouseState.updateUnconditionally()) {
            actionState.mousePosition = Array.prototype.slice.call(mouseState.position);
        }
        actionState.selectedValues = layerSelectedValues.toJSON();
        actionState.viewerState = getCachedJson(this.viewer.state).value;
        this.sendActionRequested.dispatch(action, JSON.parse(_JSON$stringify(actionState)));
    }
}
//# sourceMappingURL=remote_actions.js.map