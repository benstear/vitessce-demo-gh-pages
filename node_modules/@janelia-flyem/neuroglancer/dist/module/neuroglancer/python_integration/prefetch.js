import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _Set from 'babel-runtime/core-js/set';
import _Map from 'babel-runtime/core-js/map';
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Python-initiated prefetch support.
 */
import debounce from 'lodash/debounce';
import { RefCounted } from '../util/disposable';
import { parseArray, verifyInt, verifyObject, verifyObjectProperty } from '../util/json';
import { NullarySignal } from '../util/signal';
import { Viewer } from '../viewer';
import { WatchableVisibilityPriority } from '../visibility_priority/frontend';
export class PrefetchManager extends RefCounted {
    constructor(display, dataSourceProvider, dataContext, uiConfiguration) {
        super();
        this.display = display;
        this.dataSourceProvider = dataSourceProvider;
        this.dataContext = dataContext;
        this.uiConfiguration = uiConfiguration;
        this.prefetchStates = new _Map();
        this.changed = new NullarySignal();
        this.specification = [];
        this.updatePrefetchStates = this.registerCancellable(debounce(() => {
            const specification = this.specification,
                  prefetchStates = this.prefetchStates;

            const newStates = new _Set();
            for (const _ref of specification) {
                const state = _ref.state;
                const priority = _ref.priority;

                const key = _JSON$stringify(state);
                newStates.add(key);
                let viewer = prefetchStates.get(key);
                if (viewer === undefined) {
                    viewer = this.makePrefetchState(state, priority);
                    prefetchStates.set(key, viewer);
                } else {
                    viewer.visibility.value = priority;
                }
            }
            for (const _ref2 of prefetchStates) {
                var _ref3 = _slicedToArray(_ref2, 2);

                const key = _ref3[0];
                const viewer = _ref3[1];

                if (!newStates.has(key)) {
                    prefetchStates.delete(key);
                    viewer.dispose();
                }
            }
        }, 0));
        this.registerDisposer(dataContext);
    }
    makePrefetchState(state, priority) {
        const viewer = new Viewer(this.display, {
            showLayerDialog: false,
            resetStateWhenEmpty: false,
            dataSourceProvider: this.dataSourceProvider,
            dataContext: this.dataContext.addRef(),
            visibility: new WatchableVisibilityPriority(priority),
            uiConfiguration: this.uiConfiguration
        });
        try {
            viewer.state.restoreState(state);
        } catch (restoreError) {
            console.log(`Error setting prefetch state: ${restoreError.message}`);
        }
        return viewer;
    }
    reset() {
        this.specification = [];
        this.changed.dispatch();
        this.updatePrefetchStates();
    }
    restoreState(obj) {
        this.specification = parseArray(obj, x => {
            verifyObject(x);
            const state = verifyObjectProperty(x, 'state', verifyObject);
            const priority = verifyObjectProperty(x, 'priority', y => y === undefined ? 0 : verifyInt(y));
            return { state, priority };
        });
        this.changed.dispatch();
        this.updatePrefetchStates();
    }
    toJSON() {
        const specification = this.specification;

        return specification.length === 0 ? undefined : this.specification;
    }
}
//# sourceMappingURL=prefetch.js.map