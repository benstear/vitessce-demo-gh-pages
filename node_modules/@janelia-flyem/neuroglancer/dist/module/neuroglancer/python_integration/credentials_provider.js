import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Implementation of a CredentialsProvider based on an input and output TrackableValue.
 */
import { AnonymousFirstCredentialsProvider, CredentialsProvider, makeCachedCredentialsGetter } from '../credentials_provider';
import { fetchOk } from '../util/http_request';
import { stableStringify, verifyInt, verifyObject, verifyObjectProperty } from '../util/json';
import { Memoize } from '../util/memoize';
class PythonCredentialsProvider extends CredentialsProvider {
    constructor(client, key, parameters) {
        super();
        this.client = client;
        this.key = key;
        this.parameters = parameters;
        this.get = makeCachedCredentialsGetter(async invalidCredentials => {
            const response = await fetchOk(this.client.urls.credentials, {
                method: 'POST',
                body: _JSON$stringify({ key: this.key, parameters: this.parameters, invalid: invalidCredentials === null || invalidCredentials === void 0 ? void 0 : invalidCredentials.generation })
            });
            const json = await response.json();
            verifyObject(json);
            const generation = verifyObjectProperty(json, 'generation', verifyInt);
            const credentials = json['credentials'];
            return { generation, credentials };
        });
    }
}
class GcsCredentialsProvider extends AnonymousFirstCredentialsProvider {
    constructor(baseProvider) {
        super(baseProvider, { accessToken: '', tokenType: '' });
    }
}
export class PythonCredentialsManager {
    constructor(client) {
        this.client = client;
        this.memoize = new Memoize();
    }
    getCredentialsProvider(key, parameters) {
        if (parameters === undefined) {
            parameters = null;
        }
        const combinedKey = stableStringify({ key, parameters });
        return this.memoize.get(combinedKey, () => {
            const provider = new PythonCredentialsProvider(this.client, key, parameters);
            if (key === 'gcs') {
                return new GcsCredentialsProvider(provider);
            }
            return provider;
        });
    }
}
//# sourceMappingURL=credentials_provider.js.map