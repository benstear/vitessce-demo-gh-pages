import _slicedToArray from "babel-runtime/helpers/slicedToArray";
import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
var SharedDisjointUint64Sets_1;
import { DisjointUint64Sets } from "./util/disjoint_sets";
import { parseArray } from "./util/json";
import { NullarySignal } from "./util/signal";
import { Uint64 } from "./util/uint64";
import { registerRPC, registerSharedObject, SharedObjectCounterpart } from "./worker_rpc";
const RPC_TYPE_ID = 'DisjointUint64Sets';
const ADD_METHOD_ID = 'DisjointUint64Sets.add';
const CLEAR_METHOD_ID = 'DisjointUint64Sets.clear';
const HIGH_BIT_REPRESENTATIVE_CHANGED_ID = 'DisjointUint64Sets.highBitRepresentativeChanged';
const DELETE_SET_METHOD_ID = 'DisjointUint64Sets.deleteSet';
let SharedDisjointUint64Sets = SharedDisjointUint64Sets_1 = class SharedDisjointUint64Sets extends SharedObjectCounterpart {
    constructor() {
        super(...arguments);
        this.disjointSets = new DisjointUint64Sets();
        this.changed = new NullarySignal();
    }
    /**
     * For compatibility with `WatchableValueInterface`.
     */
    get value() {
        return this;
    }
    static makeWithCounterpart(rpc, highBitRepresentative) {
        let obj = new this();
        obj.disjointSets.visibleSegmentEquivalencePolicy = highBitRepresentative;
        obj.registerDisposer(highBitRepresentative.changed.add(() => {
            updateHighBitRepresentative(obj);
        }));
        obj.initializeCounterpart(rpc);
        if (highBitRepresentative.value) {
            updateHighBitRepresentative(obj);
        }
        return obj;
    }
    disposed() {
        this.disjointSets = undefined;
        this.changed = undefined;
        super.disposed();
    }
    link(a, b) {
        if (this.disjointSets.link(a, b)) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke(ADD_METHOD_ID, { 'id': this.rpcId, 'al': a.low, 'ah': a.high, 'bl': b.low, 'bh': b.high });
            }
            this.changed.dispatch();
            return true;
        }
        return false;
    }
    linkAll(ids) {
        for (let i = 1, length = ids.length; i < length; ++i) {
            this.link(ids[0], ids[i]);
        }
    }
    has(x) {
        return this.disjointSets.has(x);
    }
    get(x) {
        return this.disjointSets.get(x);
    }
    clear() {
        if (this.disjointSets.clear()) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke(CLEAR_METHOD_ID, { 'id': this.rpcId });
            }
            this.changed.dispatch();
        }
    }
    setElements(a) {
        return this.disjointSets.setElements(a);
    }
    deleteSet(x) {
        if (this.disjointSets.deleteSet(x)) {
            let rpc = this.rpc;

            if (rpc) {
                rpc.invoke(DELETE_SET_METHOD_ID, { 'id': this.rpcId, 'l': x.low, 'h': x.high });
            }
            this.changed.dispatch();
        }
    }
    get size() {
        return this.disjointSets.size;
    }
    toJSON() {
        return this.disjointSets.toJSON();
    }
    /**
     * Restores the state from a JSON representation.
     */
    restoreState(obj) {
        if (obj !== undefined) {
            let ids = [new Uint64(), new Uint64()];
            parseArray(obj, z => {
                parseArray(z, (s, index) => {
                    ids[index % 2].parseString(String(s), 10);
                    if (index !== 0) {
                        this.link(ids[0], ids[1]);
                    }
                });
            });
        }
    }
    assignFrom(other) {
        this.clear();
        if (other instanceof SharedDisjointUint64Sets_1) {
            other = other.disjointSets;
        }
        for (const _ref of other) {
            var _ref2 = _slicedToArray(_ref, 2);

            const a = _ref2[0];
            const b = _ref2[1];

            this.link(a, b);
        }
    }
};
SharedDisjointUint64Sets = SharedDisjointUint64Sets_1 = __decorate([registerSharedObject(RPC_TYPE_ID)], SharedDisjointUint64Sets);
export { SharedDisjointUint64Sets };
const tempA = new Uint64();
const tempB = new Uint64();
registerRPC(ADD_METHOD_ID, function (x) {
    let obj = this.get(x['id']);
    tempA.low = x['al'];
    tempA.high = x['ah'];
    tempB.low = x['bl'];
    tempB.high = x['bh'];
    if (obj.disjointSets.link(tempA, tempB)) {
        obj.changed.dispatch();
    }
});
registerRPC(CLEAR_METHOD_ID, function (x) {
    let obj = this.get(x['id']);
    if (obj.disjointSets.clear()) {
        obj.changed.dispatch();
    }
});
function updateHighBitRepresentative(obj) {
    obj.rpc.invoke(HIGH_BIT_REPRESENTATIVE_CHANGED_ID, { 'id': obj.rpcId, 'value': obj.disjointSets.visibleSegmentEquivalencePolicy.value });
}
registerRPC(HIGH_BIT_REPRESENTATIVE_CHANGED_ID, function (x) {
    let obj = this.get(x['id']);
    obj.disjointSets.visibleSegmentEquivalencePolicy.value = x['value'];
});
registerRPC(DELETE_SET_METHOD_ID, function (x) {
    let obj = this.get(x['id']);
    tempA.low = x['l'];
    tempA.high = x['h'];
    if (obj.disjointSets.deleteSet(tempA)) {
        obj.changed.dispatch();
    }
});
//# sourceMappingURL=shared_disjoint_sets.js.map