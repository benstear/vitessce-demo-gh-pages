import _Promise from 'babel-runtime/core-js/promise';
import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
import _Map from 'babel-runtime/core-js/map';
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CANCELED } from '../util/cancellation';
import { WORKER_RPC_ID } from '../worker_rpc';
import { rpc } from '../worker_rpc_context';
const freeWorkers = [];
const pendingTasks = new _Map();
const tasks = new _Map();
// On Safari, `navigator.hardwareConcurrency` is not defined.
const maxWorkers = typeof navigator.hardwareConcurrency === 'undefined' ? 4 : Math.min(12, navigator.hardwareConcurrency);
let nextTaskId = 0;
function returnWorker(worker) {
    for (const _ref of pendingTasks) {
        var _ref2 = _slicedToArray(_ref, 2);

        const id = _ref2[0];
        const task = _ref2[1];

        pendingTasks.delete(id);
        worker.postMessage(task.msg, task.transfer);
        return;
    }
    freeWorkers.push(worker);
}
function getNewWorker() {
    let port;
    if (typeof Worker === 'undefined') {
        // On Safari, the `Worker` constructor is not available from workers.  Instead, we request the
        // main thread to create a worker.
        const channel = new MessageChannel();
        port = channel.port2;
        rpc.invoke(WORKER_RPC_ID, { port: channel.port1, path: 'async_computation.bundle.js' }, [channel.port1]);
    } else {
        port = new Worker('async_computation.bundle.js');
    }
    port.onmessage = msg => {
        var _msg$data = msg.data;
        const id = _msg$data.id,
              value = _msg$data.value,
              error = _msg$data.error;

        returnWorker(port);
        const callbacks = tasks.get(id);
        tasks.delete(id);
        if (callbacks === undefined) return;
        callbacks.cleanup();
        if (error !== undefined) {
            callbacks.reject(new Error(error));
        } else {
            callbacks.resolve(value);
        }
    };
    return port;
}
export function requestAsyncComputation(request, cancellationToken, transfer, ...args) {
    if (cancellationToken.isCanceled) return _Promise.reject(CANCELED);
    const id = nextTaskId++;
    const msg = { t: request.id, id, args: args };
    const cleanup = cancellationToken.add(() => {
        pendingTasks.delete(id);
        tasks.delete(id);
    });
    const promise = new _Promise((resolve, reject) => {
        tasks.set(id, { resolve, reject, cleanup });
    });
    if (freeWorkers.length !== 0) {
        freeWorkers.pop().postMessage(msg, transfer);
    } else if (tasks.size < maxWorkers) {
        getNewWorker().postMessage(msg, transfer);
    } else {
        pendingTasks.set(id, { msg, transfer });
    }
    return promise;
}
//# sourceMappingURL=request.js.map