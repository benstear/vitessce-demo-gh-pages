import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
/**
 * @file Backend component of PerspectivePanel.  This allows the optional backend component of a
 * PerspectiveViewRenderLayer to set chunk priorities based on the state of the perspective panel.
 */
import { PERSPECTIVE_VIEW_RPC_ID } from "./base";
import { RenderLayerBackend } from "../render_layer_backend";
import { registerSharedObject, SharedObjectCounterpart } from "../worker_rpc";
let PerspectiveViewBackend = class PerspectiveViewBackend extends SharedObjectCounterpart {
    constructor(...args) {
        super(...args);
        const rpc = args[0];
        const options = args[1];
        this.visibility = rpc.get(options.visibility);
        this.projectionParameters = rpc.get(options.projectionParameters);
    }
};
PerspectiveViewBackend = __decorate([registerSharedObject(PERSPECTIVE_VIEW_RPC_ID)], PerspectiveViewBackend);
export { PerspectiveViewBackend };
export class PerspectiveViewRenderLayerBackend extends RenderLayerBackend {}
//# sourceMappingURL=backend.js.map