import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
var SharedWatchableValue_1;
/**
 * @file Facility for sharing arbitrary values that support structural cloning between threads.
 */
import { WatchableValue } from "./trackable_value";
import { registerRPC, registerSharedObject, SharedObjectCounterpart } from "./worker_rpc";
const CHANGED_RPC_METHOD_ID = 'SharedWatchableValue.changed';
let SharedWatchableValue = SharedWatchableValue_1 = class SharedWatchableValue extends SharedObjectCounterpart {
    constructor(rpc, options = {}) {
        super(rpc, options);
        /**
         * The value is being updated to reflect a remote change.
         * @internal
         */
        this.updatingValue_ = false;
        if (rpc !== undefined) {
            this.base = new WatchableValue(options['value']);
            this.setupChangedHandler();
        }
    }
    initializeCounterpart(rpc, options = {}) {
        options['value'] = this.value;
        super.initializeCounterpart(rpc, options);
    }
    setupChangedHandler() {
        this.registerDisposer(this.base.changed.add(() => {
            if (this.updatingValue_) {
                this.updatingValue_ = false;
            } else {
                const rpc = this.rpc;

                if (rpc !== null) {
                    rpc.invoke(CHANGED_RPC_METHOD_ID, { 'id': this.rpcId, 'value': this.value });
                }
            }
        }));
    }
    static makeFromExisting(rpc, base) {
        let obj = new SharedWatchableValue_1();
        obj.base = base;
        obj.setupChangedHandler();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    static make(rpc, value) {
        return SharedWatchableValue_1.makeFromExisting(rpc, new WatchableValue(value));
    }
    get value() {
        return this.base.value;
    }
    set value(value) {
        this.base.value = value;
    }
    get changed() {
        return this.base.changed;
    }
};
SharedWatchableValue = SharedWatchableValue_1 = __decorate([registerSharedObject('SharedWatchableValue')], SharedWatchableValue);
export { SharedWatchableValue };
registerRPC(CHANGED_RPC_METHOD_ID, function (x) {
    const obj = this.get(x['id']);
    obj.updatingValue_ = true;
    obj.base.value = x['value'];
    obj.updatingValue_ = false;
});
//# sourceMappingURL=shared_watchable_value.js.map