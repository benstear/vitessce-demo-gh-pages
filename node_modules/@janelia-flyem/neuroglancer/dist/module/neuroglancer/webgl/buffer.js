/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { RefCountedValue } from '../util/disposable';
import { stableStringify } from '../util/json';
import { getObjectId } from '../util/object_id';
export class Buffer {
    constructor(gl, bufferType = WebGL2RenderingContext.ARRAY_BUFFER) {
        this.gl = gl;
        this.bufferType = bufferType;
        this.gl = gl;
        // This should never return null.
        this.buffer = gl.createBuffer();
    }
    bind() {
        this.gl.bindBuffer(this.bufferType, this.buffer);
    }
    bindToVertexAttrib(location, componentsPerVertexAttribute, attributeType = WebGL2RenderingContext.FLOAT, normalized = false, stride = 0, offset = 0) {
        this.bind();
        this.gl.enableVertexAttribArray(location);
        this.gl.vertexAttribPointer(location, componentsPerVertexAttribute, attributeType, normalized, stride, offset);
    }
    bindToVertexAttribI(location, componentsPerVertexAttribute, attributeType = WebGL2RenderingContext.UNSIGNED_INT, stride = 0, offset = 0) {
        this.bind();
        this.gl.enableVertexAttribArray(location);
        this.gl.vertexAttribIPointer(location, componentsPerVertexAttribute, attributeType, stride, offset);
    }
    setData(data, usage = WebGL2RenderingContext.STATIC_DRAW) {
        let gl = this.gl;
        this.bind();
        gl.bufferData(this.bufferType, data, usage);
    }
    dispose() {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
        this.gl = undefined;
    }
    static fromData(gl, data, bufferType, usage) {
        let buffer = new Buffer(gl, bufferType);
        buffer.setData(data, usage);
        return buffer;
    }
}
export function getMemoizedBuffer(gl, bufferType, getter, ...args) {
    return gl.memoize.get(stableStringify({ id: 'getMemoizedBuffer', getter: getObjectId(getter), args }), () => {
        const result = new RefCountedValue(Buffer.fromData(gl, getter(...args), bufferType, WebGL2RenderingContext.STATIC_DRAW));
        result.registerDisposer(result.value);
        return result;
    });
}
//# sourceMappingURL=buffer.js.map