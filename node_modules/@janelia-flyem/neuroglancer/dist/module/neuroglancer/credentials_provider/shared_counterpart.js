import _Object$defineProperty from "babel-runtime/core-js/object/define-property";
import _Object$getOwnPropertyDescriptor from "babel-runtime/core-js/object/get-own-property-descriptor";
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = _Object$getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && _Object$defineProperty(target, key, r), r;
};
/**
 * @file Defines a CredentialsProvider that forwards requests to a SharedCredentialsProvider on
 * another thread.
 */
import { makeCachedCredentialsGetter } from "./index";
import { CREDENTIALS_PROVIDER_GET_RPC_ID, CREDENTIALS_PROVIDER_RPC_ID } from "./shared_common";
import { registerSharedObject, SharedObjectCounterpart } from "../worker_rpc";
let SharedCredentialsProviderCounterpart = class SharedCredentialsProviderCounterpart extends SharedObjectCounterpart {
    constructor() {
        super(...arguments);
        this.get = makeCachedCredentialsGetter((invalidCredentials, cancellationToken) => this.rpc.promiseInvoke(CREDENTIALS_PROVIDER_GET_RPC_ID, { providerId: this.rpcId, invalidCredentials: invalidCredentials }, cancellationToken));
    }
};
SharedCredentialsProviderCounterpart = __decorate([registerSharedObject(CREDENTIALS_PROVIDER_RPC_ID)], SharedCredentialsProviderCounterpart);
export { SharedCredentialsProviderCounterpart };
export function WithSharedCredentialsProviderCounterpart() {
    return function (Base) {
        return class extends Base {
            constructor(...args) {
                super(...args);
                const options = args[1];
                this.credentialsProvider = this.rpc.getOptionalRef(options['credentialsProvider']);
            }
        };
    };
}
//# sourceMappingURL=shared_counterpart.js.map