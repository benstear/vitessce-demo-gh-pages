/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SharedCredentialsProvider } from './shared';
import { getObjectId } from '../util/object_id';
/**
 * Returns a counterpart ref to be sent to the backend to retrieve a
 * SharedCredentialsProviderCounterpart that forwards to `credentialsProvider`.
 */
export function getCredentialsProviderCounterpart(chunkManager, credentialsProvider) {
    if (credentialsProvider === undefined) return undefined;
    const sharedCredentialsProvider = chunkManager.memoize.get({ type: 'getSharedCredentialsProvider', credentialsProvider: getObjectId(credentialsProvider) }, () => new SharedCredentialsProvider(credentialsProvider.addRef(), chunkManager.rpc));
    const counterpartRef = sharedCredentialsProvider.addCounterpartRef();
    sharedCredentialsProvider.dispose();
    return counterpartRef;
}
/**
 * Mixin for adding a credentialsProvider member to a ChunkSource.
 */
export function WithCredentialsProvider() {
    return function (Base) {
        class C extends Base {
            constructor(...args) {
                var _a;
                super(...args);
                const options = args[1];
                this.credentialsProvider = (_a = options.credentialsProvider) === null || _a === void 0 ? void 0 : _a.addRef();
            }
            initializeCounterpart(rpc, options) {
                const credentialsProvider = this.credentialsProvider;

                options['credentialsProvider'] = getCredentialsProviderCounterpart(this.chunkManager, credentialsProvider);
                super.initializeCounterpart(rpc, options);
            }
            static encodeOptions(options) {
                const encoding = super.encodeOptions(options);
                const credentialsProvider = options.credentialsProvider;

                encoding.credentialsProvider = credentialsProvider === undefined ? undefined : getObjectId(credentialsProvider);
                return encoding;
            }
        }
        ;
        return C;
    };
}
//# sourceMappingURL=chunk_source_frontend.js.map