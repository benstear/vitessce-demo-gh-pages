import _Object$assign from 'babel-runtime/core-js/object/assign';
/**
 * @license
 * Copyright 2020 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { fetchWithCredentials } from './http_request';
import { uncancelableToken } from '../util/cancellation';
import { cancellableFetchOk } from '../util/http_request';
export function fetchWithOAuth2Credentials(credentialsProvider, input, init, transformResponse, cancellationToken = uncancelableToken) {
    if (credentialsProvider === undefined) {
        return cancellableFetchOk(input, init, transformResponse, cancellationToken);
    }
    return fetchWithCredentials(credentialsProvider, input, init, transformResponse, (credentials, init) => {
        if (!credentials.accessToken) return init;
        const headers = new Headers(init.headers);
        headers.set('Authorization', `${credentials.tokenType} ${credentials.accessToken}`);
        return _Object$assign(_Object$assign({}, init), { headers });
    }, (error, credentials) => {
        const status = error.status;

        if (status === 401) {
            // 401: Authorization needed.  OAuth2 token may have expired.
            return 'refresh';
        } else if (status === 504 || status === 503) {
            // 503: Service unavailable.  Retry.
            // 504: Gateway timeout.  Can occur if the server takes too long to reply.  Retry.
            return 'retry';
        } else if (status === 403 && !credentials.accessToken) {
            // Anonymous access denied.  Request credentials.
            return 'refresh';
        }
        throw error;
    }, cancellationToken);
}
//# sourceMappingURL=oauth2.js.map