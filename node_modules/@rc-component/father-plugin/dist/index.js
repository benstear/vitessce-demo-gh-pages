var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_child_process = require("child_process");
var import_fs_extra = __toESM(require("fs-extra"));
var import_path = __toESM(require("path"));
var cwd = process.cwd();
function checkNpmPackageDependency(packageJson, packageName) {
  return !!(packageJson.dependencies && packageJson.dependencies[packageName] || packageJson.devDependencies && packageJson.devDependencies[packageName]);
}
var src_default = (api) => {
  api.onStart(async () => {
    var _a, _b, _c, _d;
    if (api.name !== "build") {
      return;
    }
    console.log("Check Typescript exports...");
    const packageJson = await import_fs_extra.default.readJson(import_path.default.join(cwd, "package.json"));
    if (checkNpmPackageDependency(packageJson, "np") && !checkNpmPackageDependency(packageJson, "@rc-component/np")) {
      console.log("Please install `@rc-component/np` instead of `np`.");
      process.exit(1);
    }
    const inputFolder = ((_b = (_a = api == null ? void 0 : api.config) == null ? void 0 : _a.esm) == null ? void 0 : _b.input) || ((_d = (_c = api == null ? void 0 : api.config) == null ? void 0 : _c.esm) == null ? void 0 : _d.input) || "src/";
    const isEslintInstalled = checkNpmPackageDependency(packageJson, "eslint");
    if (isEslintInstalled) {
      (0, import_child_process.execSync)(
        // Requires compatibility with Windows environment
        `npx eslint ${inputFolder} --ext .tsx,.ts --rule "@typescript-eslint/consistent-type-exports: error"`,
        {
          cwd,
          env: process.env,
          stdio: [process.stdin, process.stdout, process.stderr],
          encoding: "utf-8"
        }
      );
    } else {
      console.log("ESLint is not installed, skip.");
    }
  });
  api.modifyDefaultConfig((memo) => {
    Object.assign(memo, {
      esm: {
        output: "es",
        // transform all rc-xx/lib to rc-xx/es for esm build
        extraBabelPlugins: [require.resolve("./babelPluginImportLib2Es")]
      },
      cjs: {
        // specific platform to browser, father 4 build cjs for node by default
        platform: "browser",
        output: "lib"
      },
      targets: {
        chrome: 85
      }
    });
    return memo;
  });
};
