(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.createPubSub = {}));
})(this, (function (exports) { 'use strict';

  /**
   * A new or fake broadcast channel.
   * @type {BroadcastChannel}
   */
  var bc = (function () {
    try {
      return new window.BroadcastChannel('pub-sub-es');
    } catch (e) {
      return { postMessage: function () {} };
    }
  })();

  /**
   * Get final event name
   * @param {string} eventName - Event name to be adjusted
   * @param {Boolean} caseInsensitive - If `true`, `eventName` will be lowercased
   */
  var getEventName = function (eventName, caseInsensitive) { return caseInsensitive ? eventName.toLowerCase() : eventName; };

  /**
   * @typedef {{ [Key in EventName]: Payload }} Event
   * @template {string} [EventName=string]
   * @template {unknown} [Payload=unknown]
   */

  /**
   * @typedef {(news: T[Key]) => void} Handler - Event handler function
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * @typedef {{ event: Key, handler: Handler<T, Key> }} Subscription - Event subscription object
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * @typedef {(event: Key, handler: Handler<T, Key>, times?: number) => Subscription<T, Key>} Subscribe - Function to subscribe to an event
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * @typedef {object} CreateSubscribeOptions - Options for customizing the subscriber factory
   * @property {Boolean} caseInsensitive - If `true` the event names are case insenseitive
   */

  /**
   * @typedef {(stack: Stack<T>, options?: Partial<CreateSubscribeOptions>) => Subscribe<T, Key>} CreateSubscribe - Factory function for `subscribe()`
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * Setup subscriber
   * @type {CreateSubscribe}
   */
  var createSubscribe =
    function (stack, ref) {
      if ( ref === void 0 ) ref = {};
      var caseInsensitive = ref.caseInsensitive;

      return function (event, handler, times) {
      if ( times === void 0 ) times = Infinity;

      var e = getEventName(event, caseInsensitive);

      if (!stack[e]) {
        stack[e] = [];
        stack.__times__[e] = [];
      }

      stack[e].push(handler);
      stack.__times__[e].push(+times || Infinity);

      return { event: e, handler: handler };
    };
  };

  /**
   * @typedef {(event: Key | Subscription<T, Key>, handler?: Handler<T, Key>) => void} Unsubscribe - Function to unsubscribe from an event
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * @typedef {object} CreateUnsubscribeOptions - Options for customizing the unsubscriber factory
   * @property {Boolean} caseInsensitive - If `true` the event names are case insenseitive
   */

  /**
   * @typedef {(stack: Stack<T>, options?: Partial<CreateUnsubscribeOptions>) => Unsubscribe<T, Key>} CreateUnsubscribe - Factory function for `unsubscribe()`
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * Setup unsubscriber
   * @type {CreateUnsubscribe}
   */
  var createUnsubscribe =
    function (stack, ref) {
      if ( ref === void 0 ) ref = {};
      var caseInsensitive = ref.caseInsensitive;

      return function (event, handler) {
      if (typeof event === 'object') {
        handler = event.handler; // eslint-disable-line no-param-reassign
        event = event.event; // eslint-disable-line no-param-reassign
      }

      var e = getEventName(event, caseInsensitive);

      if (!stack[e]) { return; }

      var id = stack[e].indexOf(handler);

      if (id === -1 || id >= stack[e].length) { return; }

      stack[e].splice(id, 1);
      stack.__times__[e].splice(id, 1);
    };
  };

  /**
   * @typedef {(listeners: (Handler<T, Key>)[], news: T[Key]) => void} Inform - Inform listeners about some news
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * Inform listeners about some news
   * @type {Inform}
   */
  var inform = function (listeners, news) { return function () {
    listeners.forEach(function (listener) { return listener(news); });
  }; };

  /**
   * @typedef {object} PublishOptions - Options for how to publish an event
   * @property {Boolean} isNoGlobalBroadcast - If `true` event will *not* be broadcasted gloablly even if `isGlobal` is `true`.
   * @property {Boolean} async - If `true` event will *not* be broadcasted synchronously even if `async` is `false` globally.
   */

  /**
   * @typedef {(event: Key, news: T[Key], options?: Partial<PublishOptions>) => void} Publish - Function to publish an event
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * @typedef {object} CreatePublishOptions - Factory function for `publish()`
   * @property {Boolean} isGlobal - If `true` event will be published globally.
   * @property {Boolean} caseInsensitive - If `true` the event names are case insenseitive
   * @property {Boolean} async - If `true` the pub-sub instance publishes events asynchronously (recommended)
   */

  /**
   * @typedef {(stack: Stack<T>, options?: Partial<CreatePublishOptions>) => Publish<T>} CreatePublish - Factory function for `publish()`
   * @template {Event} [T=Event]
   */

  /**
   * Setup the publisher.
   * @type {CreatePublish}
   */
  var createPublish = function (stack, ref) {
    if ( ref === void 0 ) ref = {};
    var isGlobal = ref.isGlobal;
    var caseInsensitive = ref.caseInsensitive;
    var async = ref.async;

    var unsubscribe = createUnsubscribe(stack);
    return function (event, news, options) {
      if ( options === void 0 ) options = {};

      var e = getEventName(event, caseInsensitive);

      if (!stack[e]) { return; }

      var listeners = [].concat( stack[e] );

      listeners.forEach(function (listener, i) {
        if (--stack.__times__[e][i] < 1) { unsubscribe(e, listener); }
      });

      var localAsync = options.async !== undefined ? options.async : async;

      if (localAsync) {
        setTimeout(inform(listeners, news), 0);
      } else {
        inform(listeners, news)();
      }

      if (isGlobal && !options.isNoGlobalBroadcast) {
        try {
          bc.postMessage({ event: e, news: news });
        } catch (error) {
          if (error instanceof DOMException) {
            console.warn(
              ("Could not broadcast '" + e + "' globally. Payload is not clonable.")
            );
          } else {
            throw error;
          }
        }
      }
    };
  };

  /**
   * @callback Clear - Remove all event listeners
   * @return {void}
   */

  /**
   * @typedef {(stack: Stack<T>) => Clear} CreateClear - Factory function for `clear()`
   * @template {Event} [T=Event]
   */

  /**
   * Setup event clearer
   * @type {CreateClear}
   */
  var createClear = function (stack) { return function () {
    Object.keys(stack)
      .filter(function (eventName) { return eventName[0] !== '_'; })
      .forEach(function (eventName) {
        stack[eventName] = undefined;
        stack.__times__[eventName] = undefined;
        delete stack[eventName];
        delete stack.__times__[eventName];
      });
  }; };

  /**
   * @typedef {{ [event: Key]: (Handler<T, Key>)[], __times__: { [event: Key]: number[] }} Stack - Event stack object that stores the events handers and notification times
   * @template {Event} [T=Event]
   * @template {keyof T} Key
   */

  /**
   * @typedef {object} PubSubOptions - Options for customizing the pub-sub instance
   * @property {Boolean} async - If `true` the pub-sub instance publishes events asynchronously (recommended)
   * @property {Boolean} caseInsensitive - If `true` the event names are case insenseitive
   * @property {Stack} stack A custom event subscriber stack
   */

  /**
   * @typedef {{ publish: Publish<Event>, subscribe: Subscribe<Event>, unsubscribe: Unsubscribe<Event>, clear: Clear, stack: Stack }} PubSub - The pub-sub instance
   * @template {Event} [T=Event]
   */

  /**
   * @typedef {() => Stack<T>} CreateStack - Create a new empty stack object
   * @template {Event} [T=Event]
   */

  /**
   * Create a new empty stack object
   * @type {CreateStack}
   */
  var createEmptyStack = function () { return ({ __times__: {} }); };

  /**
   * @typedef {(options?: Partial<PubSubOptions>) => PubSub<T>} CreatePubSub - Create a new pub-sub instance
   * @template {Event} [T=Event]
   */

  /**
   * Create a new pub-sub instance
   * @type {CreatePubSub}
   */
  var createPubSub = function (options) {
    if ( options === void 0 ) options = {};

    var async = options.async || false;
    var caseInsensitive = options.caseInsensitive || false;
    var stack = options.stack || createEmptyStack();

    if (!stack.__times__) { stack.__times__ = {}; }

    return {
      publish: createPublish(stack, { async: async, caseInsensitive: caseInsensitive }),
      subscribe: createSubscribe(stack, { caseInsensitive: caseInsensitive }),
      unsubscribe: createUnsubscribe(stack, { caseInsensitive: caseInsensitive }),
      clear: createClear(stack),
      stack: stack,
    };
  };

  /**
   * Global pub-sub stack object
   */
  var globalPubSubStack = createEmptyStack();

  /**
   * Global pub-sub instance
   * @type {PubSub}
   */
  var globalPubSub = {
    publish: createPublish(globalPubSubStack, { isGlobal: true }),
    subscribe: createSubscribe(globalPubSubStack),
    unsubscribe: createUnsubscribe(globalPubSubStack),
    clear: createClear(globalPubSubStack),
    stack: globalPubSubStack,
  };

  bc.onmessage = function (ref) {
      var ref_data = ref.data;
      var event = ref_data.event;
      var news = ref_data.news;

      return globalPubSub.publish(event, news, { isNoGlobalBroadcast: true });
  };

  exports.createPubSub = createPubSub;
  exports.default = createPubSub;
  exports.globalPubSub = globalPubSub;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
