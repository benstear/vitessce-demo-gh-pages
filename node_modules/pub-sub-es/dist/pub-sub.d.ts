export type Event<EventName extends string = string, Payload extends unknown = unknown> = { [Key in EventName]: Payload; };
/**
 * - Event handler function
 */
export type Handler<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (news: T[Key]) => void;
/**
 * - Event subscription object
 */
export type Subscription<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = {
    event: Key;
    handler: Handler<T, Key>;
};
/**
 * - Function to subscribe to an event
 */
export type Subscribe<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (event: Key, handler: Handler<T, Key>, times?: number) => Subscription<T, Key>;
/**
 * - Options for customizing the subscriber factory
 */
export type CreateSubscribeOptions = {
    /**
     * - If `true` the event names are case insenseitive
     */
    caseInsensitive: boolean;
};
/**
 * - Factory function for `subscribe()`
 */
export type CreateSubscribe<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (stack: any, options?: Partial<CreateSubscribeOptions>) => Subscribe<T, Key>;
/**
 * - Function to unsubscribe from an event
 */
export type Unsubscribe<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (event: Key | Subscription<T, Key>, handler?: Handler<T, Key>) => void;
/**
 * - Options for customizing the unsubscriber factory
 */
export type CreateUnsubscribeOptions = {
    /**
     * - If `true` the event names are case insenseitive
     */
    caseInsensitive: boolean;
};
/**
 * - Factory function for `unsubscribe()`
 */
export type CreateUnsubscribe<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (stack: any, options?: Partial<CreateUnsubscribeOptions>) => Unsubscribe<T, Key>;
/**
 * - Inform listeners about some news
 */
export type Inform<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (listeners: (Handler<T, Key>)[], news: T[Key]) => void;
/**
 * - Options for how to publish an event
 */
export type PublishOptions = {
    /**
     * - If `true` event will *not* be broadcasted gloablly even if `isGlobal` is `true`.
     */
    isNoGlobalBroadcast: boolean;
    /**
     * - If `true` event will *not* be broadcasted synchronously even if `async` is `false` globally.
     */
    async: boolean;
};
/**
 * - Function to publish an event
 */
export type Publish<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = (event: Key, news: T[Key], options?: Partial<PublishOptions>) => void;
/**
 * - Factory function for `publish()`
 */
export type CreatePublishOptions = {
    /**
     * - If `true` event will be published globally.
     */
    isGlobal: boolean;
    /**
     * - If `true` the event names are case insenseitive
     */
    caseInsensitive: boolean;
    /**
     * - If `true` the pub-sub instance publishes events asynchronously (recommended)
     */
    async: boolean;
};
/**
 * - Factory function for `publish()`
 */
export type CreatePublish<T extends Event<string, unknown> = Event<string, unknown>> = (stack: any, options?: Partial<CreatePublishOptions>) => any;
/**
 * - Remove all event listeners
 */
export type Clear = () => void;
/**
 * - Factory function for `clear()`
 */
export type CreateClear<T extends Event<string, unknown> = Event<string, unknown>> = (stack: any) => Clear;
/**
 * - Event stack object that stores the events handers and notification times
 */
export type Stack<T extends Event<string, unknown> = Event<string, unknown>, Key extends keyof T> = {
    __times__: {};
};
/**
 * - Options for customizing the pub-sub instance
 */
export type PubSubOptions = {
    /**
     * - If `true` the pub-sub instance publishes events asynchronously (recommended)
     */
    async: boolean;
    /**
     * - If `true` the event names are case insenseitive
     */
    caseInsensitive: boolean;
    /**
     * A custom event subscriber stack
     */
    stack: any;
};
/**
 * - The pub-sub instance
 */
export type PubSub<T extends Event<string, unknown> = Event<string, unknown>> = {
    publish: Publish<Event>;
    subscribe: Subscribe<Event>;
    unsubscribe: Unsubscribe<Event>;
    clear: Clear;
    stack: Stack;
};
/**
 * - Create a new empty stack object
 */
export type CreateStack<T extends Event<string, unknown> = Event<string, unknown>> = () => Stack<T>;
/**
 * - Create a new pub-sub instance
 */
export type CreatePubSub<T extends Event<string, unknown> = Event<string, unknown>> = (options?: Partial<PubSubOptions>) => PubSub<T>;
/**
 * @typedef {(options?: Partial<PubSubOptions>) => PubSub<T>} CreatePubSub - Create a new pub-sub instance
 * @template {Event} [T=Event]
 */
/**
 * Create a new pub-sub instance
 * @type {CreatePubSub}
 */
export const createPubSub: CreatePubSub;
/**
 * Global pub-sub instance
 * @type {PubSub}
 */
export const globalPubSub: PubSub;
export { createPubSub as default };
