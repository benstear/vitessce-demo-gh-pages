import { Codec, CompressorConfig } from './types';
declare enum BloscShuffle {
    NOSHUFFLE = 0,
    SHUFFLE = 1,
    BITSHUFFLE = 2,
    AUTOSHUFFLE = -1
}
declare type BloscCompressionLevel = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
declare type BloscCompressor = 'blosclz' | 'lz4' | 'lz4hc' | 'snappy' | 'zlib' | 'zstd';
declare class Blosc implements Codec {
    static codecId: string;
    static COMPRESSORS: string[];
    static NOSHUFFLE: BloscShuffle;
    static SHUFFLE: BloscShuffle;
    static BITSHUFFLE: BloscShuffle;
    static AUTOSHUFFLE: BloscShuffle;
    clevel: BloscCompressionLevel;
    cname: BloscCompressor;
    shuffle: BloscShuffle;
    blocksize: number;
    constructor(clevel?: number, cname?: string, shuffle?: BloscShuffle, blocksize?: number);
    static fromConfig({ blocksize, clevel, cname, shuffle, }: {
        blocksize?: number;
        clevel?: number;
        cname?: string;
        shuffle?: BloscShuffle;
    } & CompressorConfig): Blosc;
    encode(data: Uint8Array): Promise<Uint8Array>;
    decode(data: Uint8Array, out?: Uint8Array): Promise<Uint8Array>;
}
export default Blosc;
